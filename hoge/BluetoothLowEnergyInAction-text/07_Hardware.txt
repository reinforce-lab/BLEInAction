■H1■第7章　ものへのBluetooth Low Energy技術の取り込み
Bluetooth Low Energy技術は、身の回りのものに使いやすいよう工夫された無線通信技術です。この技術は、半導体や無線モジュールなどの部品の形で、ものに組み込んでいきます。本章は、半導体などの部品の選択とそのソフトウェア、また開発体制を見ていきます。
Bluetooth Low Energy技術を用いるのは、この無線通信規格を採用している他のものと通信するためです。ですから、私達がすべきことは、無線通信技術で独自性を出すことではなく、無線通信のハードウェアとその通信制御のソフトウェアを、無線通信規格を満たすように実装することです。
ものへのBluetooth Low Energy技術の組み込みを担当すると、あらゆる境界線上に立つことになり、骨の折れる仕事になります。ものの外側にあるアプリケーションやシステム、ものの内側にあるソフトウェアや電気回路、その境界に新たに無線通信のハードウェアとソフトウェアを導入して、ものとものとのおしゃべりを作らねばなりません。
この章では、まずBluetooth Low Energy技術の無線通信のハードウェアそして通信を制御するソフトウェアの一般的な構成をみていきます。次に、それらのハードウェアとソフトウェアの実際の構成を見ていきます。
■H2■7.1　ものへの無線通信の取り込み
Bluetooth Low Energy技術は、スマートウォッチやスマートホーム、あるいはカスタム・プロファイルとスマートホンのアプリケーションを組み合わせて独自のガジェットを生み出す、基盤となる強力な手段です。その利用場面には、この技術を組み込んだ形あるものがあります。そのものは、どうやって作っていくのかを見ていきます。
■H3■結果からの逆算で考えてみる
Bluetooth Low Energy技術の活用場面を、第1章で見てきたようにブレイン・ストーミングや実験を重ねることで、アプリケーションやものといった構成要素とそのあるべき動作まで、具体的な肉付けがなされたとします。その要素のなかで、形あるものを作り上げることが、まず最初の目標となります。
その目指している結果としての形あるものが、完成したとします。そのものに組み込まれたBluetooth Low Energy技術の構成を、図TBDに示します。アンテナは電波を送受信する部分です。Blutooth Low Energy技術の、無線通信やデジタル通信制御は、1つの集積回路にまとめられます。このアンテナと集積回路は、ものの内側にあります。
つまり、目指している形あるものは、ものと、そのものの内側にある図TBDの部分との、2つに分けられます。この図TBDの部分は、ものの外部と内部にある、電波をやり取りする物理的な境界と、情報をやりとりする形のない情報的な境界の、2つの境界になります。この部分は、明らかにものの内側にありますから、この部分を作るのは、ものを作る側の人達になります。
さらに、完成したものとその動作とを見ていきます。ものの外部と内部とが、Bluetooth Low Energy技術で繋がり連携する状態が、目指す結果です。そうすると、外部からものを見ると、双方向の無線通信を通じて、人の目には見えない操作盤や表示器があるかのように、ものを操作したり動作状態を知ることができます。ものの内部から見ると、図TBDのデジタル・インタフェースを通じて、書き込まれた動作指示通りに動作をしたり、読み出し要求に対して内部状態を渡したりします。
ここまでで、ブレインストーミングなどから始まり、もの側が目指すものの構成とが見えてきました。ここまで見てきた開発過程のチェックポイントを拾い出すと:
- アイディアが現実的なものである,- 無線通信部分が設置されている,- 振る舞いができている,
となります。どの項目も考えるまでもないわかりきったことに思えますが、これらの項目をこの順番に1つづつこなしていくことが、成功に至る道になります。
■H4■アイディアが現実的であること
五里霧中の状況から、制約などなくまずアイディアを出すことで、方向性や概念を浮き上がらせるために、ブレインストーミングが用いられることがあります。様々なアイディアの中には、物理的に、またはBluetooth Low Energy技術では、あるいは商業的に、実現不可能なものもあります。
例えば、地球の裏側まで電波が届くことを前提にしたアイディアは、Bluetooth Low Energy技術の電波では物理的に実現できません。あるいは、製品を10円で販売することを前提にしたアイディアは、電気回路の製造原価がそこまでは安くはできないため実現はできません。
一見して実現不可能に思えるアイディアも、そのアイディアが目指す方向をよく見て、前提を見直せば実現可能になることもよくあります。地球の裏側と直接には通信ができなくても、インターネット技術が使えるならば、情報のやり取りはできます。10円で製造することは不可能ですが、販売後に利用料金で費用を回収するならば10円での販売も可能でしょう。
アイディアは、企画提案や開発検討などの次の段階に渡す前に、様々な面からその現実性を確認します。その製品やサービスの体験を、紙芝居や物語にして、チームで見たり誰かに見てもらい、感想を集めていくかもしれません。それぞれが黒子や演者になり、アイディアが実現した場面を演じて、1時間程度で動画を作ってみるかもしれません。知り合いにその動画を見てもらい、妥当な価格や購入するしないを聞いて、簡易な市場調査もするでしょう。
アイディアの確認では、もの側の人の参加は役立ちます。物理的にどうやっても実現できないアイディアは、その理由を示すことで、早期に破棄をして検討時間を節約できます。また、実際に動くものを手に取ると、アイディアへの理解と理解の共有度が深まります。そのためには、プロトタイピングと呼ばれる、その場で素早く動くものを作ることが必要ですが、これはある程度の基礎力が必要ですから、もの側の人の参加が役立つ場面です。
■H4■無線部分が設置されていること
次に、図TBDの無線部分が設置されていることが必要です。たいていは、無線回路を小さな1つの基板にまとめた無線モジュールを用います。無線モジュールは、各国の電波法の認証を取得していますから、製品の電波法の認証の手間を低減できます。ペン型やウエアラブル機器などで部品の実装面積の制約がとても厳しいなど、適当な無線モジュールがない場合は、Bluetooth Low Energy技術向けに半導体会社が販売している集積回路を用いて、通信回路を実装します。
開発の開始時点で、アンテナが電波をやりとりできること、また電源が供給され続けることを確認します。これらは、設計開始時点であれば様々な選択ができますが、開発が進んでからの変更は、大きな制約や手間が発生します。
まず、アンテナが電波をやりとりできることを確認します。アンテナ一体型の無線モジュールを用いているならば、本体の筐体が樹脂などで電波を通すこと、またアンテナが電波がやりとりできる位置にくることを確認します。筐体が電波を通さない金属であったり、電気回路が電池やモータなどの金属部品で覆い隠される場合は、ケーブル付きの外付けアンテナが使える無線モジュールがありますから、本体内部の別の位置や本体外部の電波のやりとりによい場所にアンテナを設置します。
次に、無線回路の電源供給を確認します。Bluetooth Low Energy技術を用いるものは、外部からいつでも電源をオンオフしたり、あるいは動作状態の確認をしたいものです。処理を行うメインボードと無線通信部とを組み合わせた構成では、メインボードがスリープ状態になると、周辺回路の電源が落とされて、無線通信部が動かなくなる場合があります。外部との無線通信が必要な間は、無線通信部に電源が供給されることを確認します。
また、開発過程にわたり、自国の電波法の定める無線通信設備の扱いに準じるようにします。これは販売するしないに関わらず、無線通信回路の試作や開発、試作品の展示、そして製品まで全ての段階で対応が必要です。日本国では日本の電波法の認証を取得している無線モジュールを用いれば、その認証を製品の認証として使えます。集積回路を使い無線通信回路を設計している場合は、電波法の認証を取得するか、電波が外部に漏れ出ないようにした部屋や箱の中で動かします。
そして、製品の販売時点では、Bluetooth SIGへの製品登録が必要です。登録することで、Bluetooth Low Energy技術の特許及び商標の利用が認められます。無登録のまま販売をしていると、特許及び商標の無断使用となり賠償を求められるかもしれません。製品登録や商標の使い方は、Bluetooth SIGが専門家を認定していますから、製品開発が始まった段階で相談するべきです。製品登録には100万円ほどの費用がかかります。電気回路は同じで色違いや少し外観が異なる製品を多数展開する場合もあるかもしれません。専門家との相談で、製品展開ごとの最適なな製品登録が見えるはずです。
■H4■振る舞いができている
Bluetooth Low Energy技術を通じたデータのやり取りは、GATT基盤またはL2CAPチャネルで行われます。その、ものの振る舞いは、プロセッサで動くソフトウェアで作られます。この振る舞いを生み出すソフトウェアは、無線通信を行う集積回路の中にあるプロセッサで通信処理と合わせて実行されるものと、無線通信とは異なるプロセッサで実行されるものがあります。
マウスやキーボードなどの周辺機器やウエアラブル機器あるいはビーコンなど、Bluetooth Low Energy技術が適している利用分野に向けて、製造費用が小さくなるように1チップで用途を満たせる集積回路が半導体各社から販売されています。そのような分野のアプリケーションは、集積回路の内部にあるプロセッサで通信処理と合わせて実行するように実装されます。
パーソナル・コンピュータやスマートホンなど、強力なプロセッサが用いられるものは、その周辺部品として無線通信の集積回路が接続されます。アプリケーションを実行するプロセッサは、最先端の半導体プロセスが用いられます。製造費用がかかるそのような高速なプロセッサは、無線通信を内蔵したものはありません。メインプロセッサと無線通信の集積回路との間は、物理的にまた情報的に、Bluetooth Low Energy技術の規格でホストコントローラインタフェースが定義されています。メインプロセッサでは、リンク層よりも上のスタックが実行されます。
Bluetooth Low Enrgy技術の活用は、ほとんどがGATT基盤の上で、プロファイルつまり振る舞いが作られます。プロファイルには、Bluetooth SIGにより承認されたプロファイルと、自分で勝手に定義をするカスタム・プロファイルとがあります。承認されたプロファイルは、Bluetooth SIGのサイトから文書が入手できます。
承認されたプロファイルのデバイスを設計するならば、半導体会社が提供しているソフトウェア開発環境に、たいていは雛形となるサンプル・アプリケーションのソースコードがあります。そのソースコードを雛形にして、周辺素子の初期化やボタン操作の処理など、独自の振る舞いを追加していくことで開発を進められます。
承認されたプロファイルのデバイスの設計であれば、そもそも自分たちで設計をせず、設計製造の委託先企業を探すのもよいかもしれません。プロファイルが承認されているということはプロファイルが承認されることで統一したデバイスが製造可能になり、そのカスタム設計と製造とを事業とする企業が探せばたいていあるものです。そのような設計と製造の委託企業は、要望に合わせた設計のカスタム化、製造設備の確保や、デバイスと接続する先のスマートホンなどのソフトウェア開発のライブラリなどソフトウェア開発環境も整備しているものです。胸ベルト形の心拍計測デバイスのような、誰が設計をしても同じようになり、外形デザインなど製品としての差別化がしづらいものには適しているでしょう。
カスタム・プロファイルでは、ものが接続する先の開発者との連携を、開発工程に入れておきます。連携先のアプリケーションなどは、開発する組織が異なる場合がよくあります。ものの内部の電気回路などとの連携は、組織や開発場所が同じであることが多く、その場合はやり取りは自然と進みます。連携相手には、モックデバイスそしてモックデバイスと接続できるアプリケーションとを渡しておきます。アプリケーション開発で、モックデバイスと接続して仮の開発を進めることができます。もしもモックデバイスと接続できない、動作が予想と異なる場合は、仮の接続アプリケーションで動作するかどうかで、どこに問題があるのかを確認します。もしも、開発中のデバイスと、開発中のアプリケーションしかない場合、どちらに問題があるかを切り分けるのに、やり取りが発生し、時間と手間がかかります。可能であれば連携先のソフトウェアの開発でも、デバイスと連携する部分はライブラリにして渡しておくのがよいでしょう。
Bluetooth Low Energy技術は、デバイスとデバイスとの間での近距離無線通信技術ですが、通信を中継するネットワーク技術を追加して利用場面を広げていくものもあります。Bluetooth SIGが承認するものに Blutooth Mesh Network があります。Apple社のHomeKitは、GATT基盤ですが、それを単なる通信路として独自のプロトコルを定義しています。Googleなどが主導するThreadは、バージョンTBDでは従来のTBDの物理層に加えて、Bluetooth Low Energy技術も仕様に含みました。
Bluetooth Low Energy技術を活用するネットワーク技術は、WiFiのようなインターネットに接続して人がブラウザを通じて様々な情報を得る用途に使われるものではありません。スマートホームなどの利用場面で、多数の機器が連携する1つのシステムを形成するためのネットワーク技術です。また、これらの技術はBluetooth SIGが承認するものと、Bluetooth Low Energy技術も物理層の1つとして活用する独自のプロトコルとの2つに分けられます。後者の場合は、その独自のプロトコルの規格認証が必要になりますから、その認証方法および費用は、採用検討時点で調べておきます。
■H4■開発の選択肢
承認されたGATT基盤のプロファイルを用いている場合は、無線通信の半導体各社のサンプル・コードにプロファイルごとのサンプル・コードがあります。それらのコードを開始点にして、自社のセンサとの接続やユーザ操作の処理を付け加えていけばいいでしょう。
カスタム・プロファイルを用いる場合は、自社独自の振る舞いを定義しようとしているので、まずプロファイルの定義を固めます。次に、接続先となるアプリケーションと、ものの内側との間に入るので、それぞれの開発の同調が取れる体制を確保します。
アプリケーションとものとを独自に開発する場合は、特にトラブルが生じやすいため、注意します。例えば、アプリケーションと、ものとの接続を、製造開始1週間前に行い、接続できないことがわかり、ファームウェアやアプリケーションの開発者を急遽集めて、数日間の徹夜作業となることもあります。
ものが既にあり、それを外部連携する場合に、任意の連続したデータのやり取りを行うシリアル・プロファイルを使う場合があります。もの側のファームウェアに大きな変更をしたくないために、そのような構成を取ります。ですが、Bluetooth Low Energy技術は、よく途切れる無線通信技術です。ですから、頻繁かつ任意のタイミングで通信が断絶しても、ものに誤動作や期待しない振る舞いが生じないかを、確認しておきます。
例えとして、ラジオ・コントロールの模型の車があり、その速度やステアリング角度がシリアル通信で制御できようになっていたとします。そこに、シリアル・プロファイルで、スマートホンから操作できるようにしたとします。スマートホンから、最高速度の設定を書き込んだ瞬間、無線通信が切断したら、そのラジコン・カーは操作できないまま最高速度で遠くまで走り去ってしまいます。このような場合は、無線通信が切断したら停止する振る舞いを1つ追加しておけば、避けられます。
GATT基盤のプロファイルではなく、Mesh Network、HomeKitあるいはThreadなどを採用する場合は、それらの認証を確認しておきます。HomeKitであればApple社とMade For iPhoneの契約が必要です。
■H3■Bluetooth Low Energy無線通信の構成要素
Bluetooth Low Energy技術のハードウェアは、ものの内側に置かれます。Bluetooth Low Energy技術のハードウェア部分を境界にして、左側にものの外側が、右側にものの内側があります。ものへのBluetooth Low Energy技術の組み込みは、人の目には見えない操作盤を設置するようなものです。その見えない操作盤が、スマートホームやIoT(インターネット・オブ・シングス)など、様々な呼び名で呼ばれる利用場面を生み出す基礎になります。
Bluetooth Low Energy技術は電波を送信するものなので、その高周波回路やアンテナなどのハードウェア部分は、電波法に従った認証の取得が必要です。また販売時には、Bluetooth無線技術の商標や特許の利用のために、Bluetooth SIGへの製品登録が必要です。
Bluetooth Low Energy技術の電気回路は、各社から発売されている集積回路を使うか、あるいは集積回路にアンテナや発振素子まで無線通信に必要な部品を小さな基板にまとめた無線モジュールを使います。よほど極端な設計要求がない限り、用途を満たす無線モジュールが見つかります。
アンテナは、形状や大きさが設計された金属線で、周囲の空間に飛び交う電波の出入り口です。アンテナが内蔵されている無線モジュールを使う場合は、筐体が電波を通すものでなくてはなりません。ですから、筐体が金属などの電波を通さない場合は、無線モジュールの基板と外付け用のアンテナとの組み合わせで認証を取得しているものがありますから、そのような無線モジュールを選択してアンテナを筐体の外に設置します。
Bluetooth Low Energy技術のハードウェアは、
- アンテナ、- 高周波回路とコントローラ,- ホスト,
の4つの部分で構成されます (図TBD)。
アンテナは、周囲の空間を飛び交う電波を取り入れ、また高周波回路の出力を電波として周囲に送出します。人間で例えるならば耳と口に相当する部分です。アンテナの見た目は、単なる電線で、送受信する電波の周波数に共振するように長さや形状が調整されています。
高周波回路は、2.4ギガヘルツの高周波信号の受信と送信を行う電子回路です。受信は、微弱な受信信号を増幅して、そこから0と1のデジタル信号を復調します。送信は、2.4ギガヘルツの正弦波にデジタル信号の0と1を表す変化を加えて変調し、それを送信電力まで増幅します。
コントローラは、デジタル・データを小さなパケットの単位にして、それを0と1のデジタル・データの流れにして高周波回路とやりとりをします。このようなパケットがきたらこのようなパケットを何マイクロ秒後に返すなど、状況に合わせた適切なパケットをマイクロ秒単位のタイミングで返すなどの処理を行います。このためコントローラは論理回路で実装され、たいていは、動作が密接している高周波回路と一緒に1つの集積回路にまとめられます。
ホストは、コントローラが提供するパケットのやりとりを使い、デバイスの発見と接続などの振る舞いやセキュリティ、そしてGATT基盤を提供します。ホストが、通信を振る舞いとデータ表現にしてくれるおかげで、ホストとやりとりするアプリケーションは、通信を意識する必要がなくなります。ホストは、ソフトウェアとして実装されます。ホストとアプリケーションは、1つのプロセッサで実行する構成にすることもあれば、別々のプロセッサで実行する構成にすることもあります。
■H3■無線通信のハードウェアとその選択
■H4■1チップ構成か2チップ構成か
Bluetooth Low Energy技術の目標の1つは、様々なものに使えるように、安価に製造できることです。高周波の送受信やパケット制御を、トランジスタなどの個別部品で電子回路で作ると、大きく高価なものになります。
Bluetooth Low Energy技術は、集積回路にすることで安価に製造できる技術です。集積回路と言っても、スマートホンのプロセッサのような最先端プロセスで製造する集積回路は高価になります。この技術は、十分に安価な一般的なプロセス・ルールで製造する集積回路で、実装できるようになっています。
したがって、Bluetooth Low Energy技術をものに取り込むには、まずどのように集積回路を使うのかを選択します。まず、Bluetooth Low Energy技術を担当する半導体と、アプリケーションが実行される半導体とを、同じ半導体にする1チップ構成と、個別の半導体を用いる2チップ構成の、2つに分けられます。
1チップ構成は、1つの半導体の中で、Bluetooth Low Energy技術の通信とアプリケーションとが実行される構成です。チップが1つだと、実装面積が小さくできます。また、無線通信と演算処理の時間配分がソフトウェアから直接扱えるので、消費電力低減に不可欠なスリープ時間の制御が容易です。この構成は、キーボードやマウスなどの周辺装置のような、検出したキーのオン・オフや移動量を通信で伝えるだけでよく、必要な演算量は小さく、価格と電池消費を小さくしたい分野で、よく用いられます。
1チップ構成には、Wi-FiとBluetooth無線技術が1つの半導体にまとめられたコンボチップで、ユーザ・アプリケーションが実行できるものがあります。Wi-Fiの通信速度でインターネット・プロトコルに対応できるように、プロセッサの動作速度もメモリ量もかなり大きなものが使われています。(TBD ESP32など)
1チップ構成の半導体では、アプリケーションの処理に必要なメモリ量や演算能力が確保できない、開発環境を変えたくない場合は、2チップ構成も取ります。例えば、万歩計をBluetooth Low Energy技術対応するときに、加速度から歩数を求める演算処理を、1チップ構成に移植しようとして、適切な半導体がない、開発環境が異なるために移植費用がかかる場合など、2チップ構成を取るでしょう。
2チップ構成は、高性能なプロセッサの周辺部品として無線通信の半導体が配置される構成です。パーソナル・コンピュータやスマートホン、あるいは組み込みLinuxボードなどは、この構成を取ります。
■H2■7.2　開発体制とチェックリスト
何をするか		実験			試作,組織内利用	 事業,一般向け----------------------------------------------------------------------------利用範囲	   自分で利用	　  仲間内利用		 一般販売開発時間	 	1時間		   1ヶ月		   1年数量、1個		10~100	　　   ~1000			~1万個単位,継続した製造製造			手作り		  外部委託			 製造専門に依頼電波法			対応		   対応				 対応SIGへの製品登録　不要			営利では必要		必要廃棄			粗大ゴミ	   産業廃棄物		地方自治体
					試作環境		  試作、製造目的	製造目的
また、ハードウェア担当と言っても、電気回路だけしかなかったところに、BLEを追加する場合、無線通信技術の専門家でもないのに、BLE担当に、させられる。電気に一番近く、チームの中でそれが専門だから。予算とか決済自由度があればいいのですが、大抵の場合は、自分がそれを完遂するほかなくなる、周りから見て1番の"専門家"だから。
では、BLEでは具体的にどのような成果物が出るのでしょうか。
個人で、学習や趣味の場合は、動くものが多いでしょう。センサーでロギングとか、しょぼすぎますし。スマホからのラジコンとか多いんじゃないでしょうか。ならば、サンプルで動かせばいいだけで、あとはボタンの配置、ボタンのオンオフを別のセンサーやらでトリガーさせるなど、信号の流れの組み合わせを変更したり作ったりして、いろいろな動きを作れる。この場合のハードウェアは、スマホの操作用アプリと、それと通信して動く通信回路と電気モータです。
事業的なところで。これはもう千差万別です。周辺機器であれば、マウスやキーボード、スタイラスのペンなど。環境モニタリングの温度センサーや、マイクロロケーションのビーコン。WiFiの初期設定。カーテンの自動開け閉め装置など。
これは作ったものがどこまで広がるか、どこで廃棄されるか。
形あるものそれ自体、目の前にあるものと同じものを延々と作ること。商品レベルのものを。
関わり方にかかわらず、調査または実験、試作、設計、製造管理などの段階を踏みます。アイディアが実現できるか、実験の段階では実際に作る必要はなくて、紙の上で構想をまとめるのでもいい、動画撮影や紙芝居を作り、それを人に聞いてもらう、黒子さんがよし何するという何かですます。カメラを回して、スイッチが入るとか、市販品やらで。
	#@# 目的に適した実装提案	#@# 	用途と仕様			(縦軸にハードウェア、横軸にソフトウェア。電池交換の有無、設置方法、運用方法、廃棄方法。ハード側からの提案になるもの。)	#@# 	試作なのか製造なのか	#@# 	開発分担の組み方と流れ	(SDKはどこが作る、ハードODMだと、あとで改良時に金額と時間。資源を持つことは、お金がかかるが、自由度と何より本音が聞けること。判断するには、情報が必要だから。)	#@# 	認証制度			(電波法, Bluetooth, 試作時の注意、設計段階で反映、各国対応、説明書)	#@# 半導体の選択	#@# 	目的に合わせた選択		(全体バランス。大きさ、消費電力、目的。モジュール、価格。極端な低消費電力なのか。)	#@# 	ワンチップか2チップか	(構成。通信だけ、既存機器+通信、処理+通信、1チップ)	#@# 	センサーを選ぶ			(バス、動作電流、スイッチ兼用とかなら特定の機能。IOの数、エキスパンダ。)	#@# 	電池の選択と電源回路		(LiPo, NiH, コイン型、USB)	#@# 	半導体会社ごとの特色		(TI, Cypress, Nordic, CSR, Dialog。OS、開発環境、ユーザフォーラムの充実度、買収の過程で)	#@# 電気と機構設計	#@# 	モジュール実装		(アンテナの設計、制約、性能の検証)	#@# 	電気回路設計		(EMC, EMI)	#@# 	製造組み立て、認証制度	(製造管理)	#@# ソフトウェア開発	#@# 	開発フロー			(会社の区切りかたで振る舞いが異なること。流れは、ES、本番、端子は、担当は? 節目は)	#@# 	ソフトウェア開発環境		(IDE、RTOS、ライブラリ、ユーザフォーラム)	#@# 	アプリケーション開発との連携	(仕様書ベース、提供タイミング、トラブル発生時の切り分け方、連絡の取り方)	#@# 	ユーザ体験の確認と継続的開発	(販売前、販売後。そしてOTAなど。動くことではなくて、おつきあいの商売だから。)	#@# まとめ	#@# 	- 立場が異なれば、考え方や見え方が異なる。最初から予想できるものは、予想した組み方にする。	#@# 	- 外に依頼して何かを作るとなると、ちょっとした実験への負荷が、お互いに大きい。一方は時間、一方はお金。	#@# 	- 専門家の選択と素人だから理解できないは違う。無数の可能性から、適切な組み合わせを選ぶのは専門家に任せればいい。その選択内容と理由は、十分に説明を受けて、勉強すればいい。
■H2■7.3　アプリとハードの連携の勘所
■H3■電力消費量を最小にする
iOSアプリケーション開発は電池消費量を常に注意します。もしもアプリケーションが、量自体は小さくても、定常的にかつ長時間電力を消費すれば、積分すれば電池消費量は大きくなります。携帯されるiOSデバイスでは、ユーザがすぐそれに気づき、直前にインストールしたアプリケーションが原因だろうと、それを削除するかもしれません。
Bluetooth LEは超低消費電力の無線通信技術です。これは、接続したマスターとスレーブで電波の送受信のタイミングを同期することで、高周波回路を動かす時間を最小にしているからです。Bluetooth LEが使う2.4GHz帯の周波回路の動作電流それ自体は、クラシックBluetoothと違いはありません。その稼働時間を最小限に絞ることで、時間平均では超低消費電力になるのです。
Core Bluetoothフレームワークを使う時は、スキャンの期間を必要最小にすることだけに気をつけます。iOSアプリケーション開発者がほかに注意することは、ありません。通信による電力消費量に大きく影響するリンク層の通信パラメータの設定は、iOSが隠蔽するので、iOSアプリケーション開発者が触れることはできません。通信パラメータの設定は、ペリフェラルのファームウェア開発者の担当領域です。
2.4GHzの高周波回路では、送信する信号が自分でわかる送信回路よりも、むしろ電力値が8桁以上も違う信号を受信する受信回路のほうが、消費電流が大きくなります。スキャンは、おそらく近辺にいるだろうペリフェラルが送信しているかもしれないアドバタイジング・パケットを検出するために、受信回路を長い時間動作させます。このため、消費電力を最小にするために、スキャンの期間が必要最小になるように注意をします。
■H3■バックグラウンド状態でのデバイスの発見とアドバタイズメント
Bluetooth LEはコイン型電池で年単位の無線通信をし続けられるのが大きな特徴です。この特徴を活かしたアプリケーションとデバイスの協調動作を実現するために、iOSは、iOSアプリケーションがサスペンド状態のときのBluetooth LEデバイスから通知があればそれをユーザに表示する機能と、バックグラウンド動作を提供しています。バックグラウンド動作がデバイスとの連携に重要です。
iOSアプリケーションは、セントラ・ロールおよびペリフェラル・ロールになります。それぞれに、Information property list (Info.plist) fileに指定するバックグラウンド動作のモードが追加されました。バックグラウンド状態のiOSアプリケーションは、Bluetoothのスイッチのオンオフや、リモートのペリフェラルからの通知発生などの、Bluetooth LEに関係するイベント発生の都度、iOSから10秒間のアプリケーション実行時間を与えられて、アプリケーションのイベントに該当するデリゲートが呼び出されます
iOSアプリケーションのフォアグラウンド状態とバックグラウンド状態で、iOSのBluetooth LEの振る舞いが異なることに、注意が必要です。iOSは電力消費量に注意して設計されています。Bluetoooth LEは電力を消費する無線回路を使います。特にiOSアプリケーションが動作し続けるバックグラウンド状態は、少しの電力消費でも時間積分すると大きな電力消費量になります。このため、開発者が不注意で電力を消費してしまわないように、非接続状態でのBluetooth LEの無線利用に対しては、iOS自体に工夫がなされています。
Bluetooth LEで予期せぬ電力消費を生じる場面は、デバイスの発見およびアドバタイズメントをする期間です。いったんBluetooth LEデバイス間の接続が確立すれば、その無線通信による消費電力量はコイン型電池1つで年単位持つ程度のものになります。
iOSアプリケーションがセントラル・ロールならば、バックグラウンド状態では、アドバタイズメントのスキャン周期が12分程度に1回と長くなります。また、アクティブ・スキャンを行いません。このため、リモートのペリフェラルの発見周期が長くなります。またリモートのペリフェラルが、アクティブ・スキャンでのみサービスのUUIDが取れる設計の場合は、サービスを発見できません。<!--TBD  振る舞い確認 -->
Bluetooth LEの無線は、他のiOSアプリケーションと共有しています。そのため、他のアプリケーションの振る舞いが、バックグラウンド状態での動作に影響を与えることがあります。例えば、フォアグラウンドのiOSアプリケーションがスキャンを開始すると、その時に発見されたデバイスはバックグラウンド状態のiOSアプリケーションにも通知されます。
iOSアプリケーションがペリフェラル・ロールならば、バックグラウンド状態では、iOSが送信するアドバタイジング・データが変更されます。バックグラウンド状態では、ローカル・ネームが送信されません。したがって、もしもリモートのセントラルが、ローカル・ネームでデバイスを検索していると、このペリフェラルを発見できません。
■H3■アクセサリの実例ほげ
アプリケーションやネットワークそして事業までを統合したアプセサリは、まだ少なくこれから登場するでしょう。アクセサリ自体は、2012年の夏あたりから次々登場しています。いくつかを紹介します。
1つは、プロトタイピングのための開発キットやアクセサリです。これらは、早い時期から登場しています。まずBluetooth LEの半導体やモジュール会社が、組み込み機器開発者向けキットの提供を開始しました。iOSアプリケーション開発者のなかにも、Bluetooth LEデバイスの開発をしてみたい要望があります。次に登場してきたのが、その要望にあわせて、組み込み機器開発者でなくても使いやすい、より安価な開発キットです。
日本の技術基準適合証明を取得しているプロトタイピングに向いたものに:
* SBBLE(サブレー) △[http://sbble.micutil.com](http://sbble.micutil.com)☆* Konashi △[http://konashi.ux-xu.com](http://konashi.ux-xu.com)☆* センサータグ △[http://www.tij.co.jp/tool/jp/cc2541dk-sensor](http://www.tij.co.jp/tool/jp/cc2541dk-sensor)☆
があります。
SBLBLE(サブレー)はマイクロチップ・テクノロジー・ジャパン株式会社のPICマイコンを採用した開発キットです。市販のUSB Bluetooth4アダプタを挿して使います。Konashiは、iOSアプリケーション側の開発がObjective-Cに加えてJavaScriptでも開発できます。ウェブ・サービスの開発者が、フィジカル・コンピューティングをiOSでおこなう場合の唯一の選択肢です。センサータグは、テキサス・インスツルメンツ社の半導体の評価キットで、25ドルと低価格です。次のセンサを搭載しています:
* 放射温度センサ、温度センサ* 湿度センサ* 圧力センサ* 加速度計* ジャイロスコープ* 磁力計
必要なセンサが上記にあるプロトタイピングであればセンサータグを、LEDの点灯など低速の外部装置制御をiPhoneから行うならKonashiまたはSBBLEを、任意のファームウェアを開発したいときはSBBLEを選択するとよいでしょう。
キーホルダーまたはタグは、よくあるアクセサリです:
* キーホルダー、[iPhone用探せるキーホルダー](△http://buffalo.jp/products/catalog/supply/bluetooth/bluetooth/security/bshsbtpt01/)☆* StickNFind △[https://www.sticknfind.com](https://www.sticknfind.com)☆
キーホルダーは、iPhoneと接続して使うものです。iPhoneを置き忘れしそうになった時にキーホルダーから警告音を出したり、キーホルダーのボタンを押すとiPhoneから音が出る機能でiPhoneを探すのに利用します。タグは、代表的なものにStickNFindがありますが、ものに取り付けておいて、ものを探すのに使うものです。その機能は、キーホルダーのボタンを省略したもので、おおよその距離をiPhoneで確認すること、iPhoneから操作してタグから音や光を出すこと、ができます。
たいていのキーホルダーやタグは、仕様が公開されていたり、ソフトウェア開発キットが提供されていて、アプリケーション開発に利用ができます。近接検出または光や音の出力を必要とするプロトタイピングに利用できます。
この他にも:
* 心拍センサ、 [Alpha](△http://www.alphaheartrate.com)☆* 活動量計、[Fitbit](△https://www.fitbit.com)☆* 睡眠記録、[オムロン ねむり時間計](△http://www.healthcare.omron.co.jp/corp/news/detail/223)☆* 姿勢検出、 [Lumoback](△http://www.lumoback.com)☆* 腕時計、[Pebble](△http://getpebble.com)☆* 顔検出、[HVC-C1B](△http://plus-sensing.omron.co.jp/egg-project/)☆
などが市販されています。
アクセサリに直接アクセスできるSDKを提供するもの、アクセサリに直接アクセスするAPIはなく、ウェブ側に蓄積されたデータにアクセスするAPIを提供するものなど、APIやSDKの公開は、製品ごとにまちまちです。
■H3■アクセサリの実例
アプリケーションやネットワークそして事業までを統合したアプセサリは、まだ少なくこれから登場するでしょう。アクセサリ自体は、2012年の夏あたりから次々登場しています。いくつかを紹介します。
1つは、プロトタイピングのための開発キットやアクセサリです。これらは、早い時期から登場しています。まずBluetooth LEの半導体やモジュール会社が、組み込み機器開発者向けキットの提供を開始しました。iOSアプリケーション開発者のなかにも、Bluetooth LEデバイスの開発をしてみたい要望があります。次に登場してきたのが、その要望にあわせて、組み込み機器開発者でなくても使いやすい、より安価な開発キットです。
日本の技術基準適合証明を取得しているプロトタイピングに向いたものに:
* SBBLE(サブレー) [△http://sbble.micutil.com](http://sbble.micutil.com)☆* Konashi [△http://konashi.ux-xu.com](http://konashi.ux-xu.com)☆* センサータグ [△http://www.tij.co.jp/tool/jp/cc2541dk-sensor](http://www.tij.co.jp/tool/jp/cc2541dk-sensor)☆
があります。
SBLBLE(サブレー)はマイクロチップ・テクノロジー・ジャパン株式会社のPICマイコンを採用した開発キットです。市販のUSB Bluetooth4アダプタを挿して使います。Konashiは、iOSアプリケーション側の開発がObjective-Cに加えてJavaScriptでも開発できます。ウェブ・サービスの開発者が、フィジカル・コンピューティングをiOSでおこなう場合の唯一の選択肢です。センサータグは、テキサス・インスツルメンツ社の半導体の評価キットで、25ドルと低価格です。次のセンサを搭載しています:
* 放射温度センサ、温度センサ* 湿度センサ* 圧力センサ* 加速度計* ジャイロスコープ* 磁力計
必要なセンサが上記にあるプロトタイピングであればセンサータグを、LEDの点灯など低速の外部装置制御をiPhoneから行うならKonashiまたはSBBLEを、任意のファームウェアを開発したいときはSBBLEを選択するとよいでしょう。
キーホルダーまたはタグは、よくあるアクセサリです:
* キーホルダー、[iPhone用探せるキーホルダー](△http://buffalo.jp/products/catalog/supply/bluetooth/bluetooth/security/bshsbtpt01/)☆* StickNFind △[https://www.sticknfind.com](https://www.sticknfind.com)☆
キーホルダーは、iPhoneと接続して使うものです。iPhoneを置き忘れしそうになった時にキーホルダーから警告音を出したり、キーホルダーのボタンを押すとiPhoneから音が出る機能でiPhoneを探すのに利用します。タグは、代表的なものにStickNFindがありますが、ものに取り付けておいて、ものを探すのに使うものです。その機能は、キーホルダーのボタンを省略したもので、おおよその距離をiPhoneで確認すること、iPhoneから操作してタグから音や光を出すこと、ができます。
たいていのキーホルダーやタグは、仕様が公開されていたり、ソフトウェア開発キットが提供されていて、アプリケーション開発に利用ができます。近接検出または光や音の出力を必要とするプロトタイピングに利用できます。
この他にも:
* 心拍センサ、 [Alpha](△http://www.alphaheartrate.com)☆* 活動量計、[Fitbit](△https://www.fitbit.com)☆* 睡眠記録、[オムロン ねむり時間計](△http://www.healthcare.omron.co.jp/corp/news/detail/223)☆* 姿勢検出、 [Lumoback](△http://www.lumoback.com)☆* 腕時計、[Pebble](△http://getpebble.com)☆* 顔検出、[HVC-C1B](△http://plus-sensing.omron.co.jp/egg-project/)☆
などが市販されています。
アクセサリに直接アクセスできるSDKを提供するもの、アクセサリに直接アクセスするAPIはなく、ウェブ側に蓄積されたデータにアクセスするAPIを提供するものなど、APIやSDKの公開は、製品ごとにまちまちです。-->
■H3■アプセサリの種類と構成
取りうる構成は、案外決まっている。ハードウェア要素、使える技術、ソフトウェア的なものとハードウェア的なもの。技術書、センサ工学、読んでおけばOK。半導体の会社、世の中にある製品。いろいろ。表示装置: 点、面。LED、液晶、電子ペーパ、有機EL。LED。面に並べた。入力と出力最低でもボタン1つとLED。電源ONと動作状態表示。単体で最低限。センサー、モータ。音。
前提: スマフォとの連携、将来的にはWiFi? スマートウォッチ的なもの、中継。
立場: スマートフォンで、ネットに繋がって、警告。接続: 繋がりっぱなし、どこで繋がるのか、接続数、必要性。反応
価格、デザイン。口コミ、売り込み?制約条件: 取り付け位置、習慣化されるか?、消費電力、充電の手間、運用第1章で分類した、取り付け設置位置でデータの意味とか採れるとか。電池制約で、消費できる電力量。実用範囲。実験なら、毎日使うでは、間欠?
要素- トポロジー- ペアリング、ボンディング- 消費電力、レスポンス- 接続のタイミング
■H3■ネットワークのトポロジ
半導体やSDKを選ぶ。ペリフェラルのみのもの、ペリフェラルとセントラルになれるもの(4.1以降)、同時接続数。
使い勝手的なところ。セントラルとペリフェラル。スター型。ただし4.1から同時になれるので、中継、スキャッタネット。
所有権と、ユーザがどこを見るかというので:
一番簡単なのは、自分が持っている1台のデバイスと連携する。通知系デバイスとかは、それでいいだろう。健康系とか。いまのは、そういうのが多いんだろうね。所有者が自分一人っていうもの。
画面が2つあるもの、スマフォではきついものとか。中間に取りまとめ役がつく。:自転車のセンサー。これ統合して表示、でスマフォにも。この場合はセントラル2つに繋がるペリフェラルっていうのいいんだけど、自社製品なら、統合しちゃって、サイコン、スマフォに統合する。データ蓄積とかそういうの。こういうの炎天下とか、厳しい環境、スマフォでもいいんだけど、スマフォではきつい。温度とか。
複数でシェア、同時利用するもの。リモコンであれば、同時接続必要。共有の概念。エアコンのほうがセントラル、スマートフォンがペリフェラル。昔のだとできなかったけど、いまならできるか。あるいは、スマートフォン同士が連携してて、実は1台がつながっているだけ、ほかはネットで同期とか。WiFiにBLE入っていれば、ネット側からという、大きく迂回した構成もとれる。見た目同じなら同じだろう。独自の仕様、後にアップデート。GATTベースなら共存可能。DFU。
範囲が広いもの:メッシュとか、パケットを中継するっていう。部屋伝いに。でもインターネット側にでるのは、1つのところだろうから、自宅ならね。だからスター型のおおきいやつ、でも物理的に1対1で電波が届かないなら、中継しましょうと。自社で閉じる?
スマートフォンを使わない構成: IPv6系とか、そういう系統。農業のセンサーとか、M2M的な。収容数とか、同時接続の数とか、メッシュの構築、無線+プロトコルで総合でみた消費電力、管理のしやすさ。スマフォが入らないのなら、なんでもいい。たまたま使える。
今後は、ペリフェラルのまとめ役。サイクルコンピュータ的な。IoT系、スマフォではなくてWiFiも含めた。ホップ、メッシュ。規格的には。しかしWiFiを見てもわかるように。AppleID統合とか振る舞い。技術的に繋がるが、自社製品であればより簡単に。工夫。エコシステム。技術をユーザに見せない。
■H3■接続のタイミング
故障、イベント。突発的。近くを行き過ぎたら反応する。所有権限。データは見られる。解析できる? 反応すべき?あることがわかる、一方通行。OSとハード統合されていないときつい。
iBeacon的な。ブロードキャスト、アドバタイジング。
ユーザが画面を見ていること。バックグラウンド。たまたま。
据え置き。WiFi統合。大容量、電池。電源。1秒スキャン、10秒待機。かなり持たせられる。でも単体だと、表示? 検出?専用設計
読み書き。たまに反応。消費電力、スマートフォンが受け側。接地側なら。アプリ、反応タイミング。バックグラウンド。10分に1回程度。たまたま。ANCSに反応するものは?
■H3■ペアリングとボンディング
接続するならば、必要なのは、勝手につながったら困る。所有権。勝手に知られるのは困る。データの所有権。操作の所有権。
セントラルをいくつまでボンディングできるかとか、管理、問題。UIとか表示とか次第で振るまいが違う。要は、確認。りょうh
最初の接続の体験。ユーザが目で見て確認する。キーがあるのか、パスコード入力か。機種ごとに。アプリと完全統合するのもいいだろう。独自SMを設計するみたいな。
接続までの時間:アドバタイジング・インターバル。発見して、接続をかける。初回は、アプリは2段階。なので、インターバルは短く。なにもなければ、長く。ユーザの操作をした時にアドバタイジングとか、勝手に繋がるものなら、そう設計するとか。無駄な接続要求、電車の中でいたずら的なとか。
初期設定の体験:コネクション・インターバル。最初の設定時、転送時間。リクエストで。
デバイス間の技術だから、複数の所有するデバイスで接続させたいときは、個別にボンディングさせるくらいしか、やりようがないと思うけど。独自にSMを実装してもいいか。接続は弾けないけど、接続はされないという。
アプリで、いつペアリング画面がでるのか。(実際には、ペアリングとボンディングだけど、iOSでは画面が1つになっているから。)
(ボンディングしてたら、勝手に繋がる? ANCSだと、いつの間にかつながっているっぽいか?)
必要になった時にiOSはダイアログを出す。セキュリティオプションが付いているキャラクタリスティクスにアクセスしたとか、アクセスされたとか。
■H2■7.4　Bluetooth low energyの半導体
モジュールを使うとしても、カスタム設計としても、ファームウェア開発から見たら同じこと。基本構成、専用プロセッサ+BLE専用、1チップ化。特殊機能、ANTとかWiFiとか、デュアル/シングルモードとか。多品種、他の機種。開発環境や経験。
■H3■評価項目
(試作時と量産時の入手性、価格、モジュール、開発者。製造費用と開発期間)(ODM/OEM?)
■H3■半導体の種類
(半導体会社はどんな会社があるのか)(モジュール会社はどんな会社があるのか)立ち位置、特徴、付加価値。
■H3■構成の全体像
処理と通信が別チップか1チップか:BLEチップ + マイコンSoCチップ(BLE+マイコン)浮動小数点演算、専用回路。マイコン Cortex-M4F Cortex-M0
電池:コイン型リチウム電池、充電式。半導体が違ってくる。充電管理および電源制御の半導体。
センサー系:
■H3■開発環境
IDE, 縛られているもの。MDK-ARM、IAR。Eclipse。フロント。コンパイラ gcc, arm-ccRTOS、ライブラリそのもの。mbed?
■H3■他の無線通信技術との統合
マウス、既存。プロプライエタリ。製品間の通信。WiFi統合。デュアル、シングルBT。
構成: SoCか、外部半導体か。無線プラスアルファ: WiFi, デュアル、IoT系。ANT+。
- 性能-- 消費電力、無線と処理-- 処理能力- 開発環境-- 独自ライブラリの学習コスト-- 今後のメンテナンス-- ファームウェアの更新機能- 特徴-- ANT+, デュアル、WiFiなど
- Nordic- TI- Broadcom- CSR- ルネサス、東芝、ラピス- Dialog
電池周り。Li-Po充電管理、かつDC/DC変換
半導体。SoC、各社。仕組みや構造。HCIベース、ワンチップ。プロセッサ、ライブラリ、開発環境。環境的なもの:ANT+とか、既存の無線通信とか。マウス的な。WiFiも同時であれば? そういうモジュールがいいかもしれない。HomeKitとかならば? そういうのに対応している会社のがいい。契約などで。
モジュール製造価格、大きさ(ピン)、SiP(アンテナ内蔵)、スクリプト。
マイコンの構成。BLE+マイコン、1チップ、か2構成。アップデート。それぞれが認証範囲だから。チェック、確認。
■H3■BT4.0/4.1/4.2
物理層はあるので、その上のスタック次第。けっこう、更新で行ける感じ。先を見越して。メッシュネットワーク音声通話
■H3■電気的な特性
ピンコンパチブル。ベア台、WCSP。小ささ。フォーラムの充実度。
■H2■7.5　アプセサリでのファームウェア開発
■H3■チーム構成
3の構成。ハードウェア、ファームウェア。1対1。仕事を投げると、動かないなどトラブル。対処。気分的な。常に、なにか仕事があるわけではないが中性中立の、3人目。
■H3■回路設計が先か、ファームが先か
回路設計、のちファーム。機械部品があると、やっかいかもな。テスト用ファーム? BLEとか機能じゃなくて、テスト信号入力で機能確認。マイコンすら別のもの。回路開発の人が使うジグ。
マイルストーンをお互い決めて。回路が先。でも本番までの設計、時間がかかる。開発用のボード。信号を当たれる。
モジュール、電波法的な。機能が同等品を使ってもOK。32kHzの推奨のあるなし、LDOかDCDCか。GPIOの本数、アンテナの利得。
判別つかないところがある。大抵はI2CかSPI。それほど高速バスでもないから、配線だけした開発用ボード。開発時はprintfデバッグ。ファームウェアの書き込みと、デバッグメッセージの出力用ポート。(開発版でも出荷時にファーム書き込みでポートはあるか)
本番の基板となると、ちょっと時間がかかる。機能設計ならOK。後で電池とかと統合して困ったことがあるけど。
■H3■はまりどころ
service changed。ペアリング、ボンディングまわり。ANCSのCCCDまわり。(iOS9ではどうなんだろう?)
■H3■トラブルの原因切り分けと対応
振る舞いで。再現。パケットレベルiOSのロギング。iOS自体。ハンドラ、service changedとか。=== スニファの準備と使い方Windows/Mac
通信サンプル開発環境的なところを解説。発見と接続ホワイトリスト認証、ボンディングとペアリングマスタースレーブ/サーバとクライアントデータベースの構築サービス変更あたり、GAP通信速度、MTUの変更とか
libUSB btstack設定、ドングル、USBさして
■H2■7.6　開発のポイントとプロトタイピング
アプリケーションのサンプル、ハードウェアの試作あれこれ。プロトタイピング、iOSアプリケーション単体、ハードウェア。ペリフェラルも作れるから、そっちで試作。わざわざプロトタイピングするのは、センサとかIOとか大きさとか電池の稼働時間とか、iPhoneではハードウェアの要件を満たせない。たくさんばらまく必要がある(費用)
■H2■7.7　ハードウェア・プロトタイピング
■H3■ファームウェアの位置づけ
ならば周辺機器側にファームウェア単体で動かせす、通信？応用例ごとに違うもの。ユーザのアプリケーション。センサーとかIO拡張系、入力のみ、出力が一般的なもの。本当はサービスで、IOの先につながるセンサーとか機能を抽象化する、そうするとファームウェア。
オリジナルのファームが必要な場面:
応答時間が問題(100ミリ秒とかの)サービスとキャラクタリスティクスを定義したい非接続時に単体で機能させたい切断時の振る舞いとかを定義したい
要は、ユーザのアプリケーションが度のタイミングで動作するか、とういこと。
通信でつながっている時は、機能をどこに持たせるか。レイテンシ、どうしょうもない。サービスとキャラクタリスティクス、定義はファームウェア。汎用IOじゃなくて、機能を定義したもの。例えばI2Cの先に温度センサーがあるなら、温度のサービスを。汎用に使えるし。
非接続のとき、ファームウェア、単体。切れているところの振る舞い。プロトタイピングならば、"切れたつもり"で模倣すればOK。でも、けっこう致命的かも。例えば、ラジコンに使っていたら、モータの出力設定そのままになるかもしれない。おとすなら落とすで、いいんだけど。結構、こういう切れた時の振る舞いは、デモンストレーションではもないにならないかもだけど。
■H3■BLEのハードウェア開発
BLEのデバイス開発は、組み込み装置の開発そのものです。ARM Cortex-M0のようなマイコンに、BLEのプロトコルスタックとユーザのアプリケーションを入れて、周辺のスイッチやLED、そしてセンサーを動かすハードウェアを開発していきます。
マイコンを利用する開発の難易度は、何を作りたいか、どう作るかの構想により、大きく違います。構想をたてる時点から、組み込み会社と協業していくことを、おすすめします。マイコン用の開発環境(IDE)があり、C言語で開発していきます。
ここでは、BLEのデバイス開発について、見ていきます。試作では、むき出しの基板に組み上げた回路でもよいでしょうが、実際には、筐体や商品パッケージ、取扱説明書など付随するものも必要です。ここでは、それらは考えません。
■H3■フルカスタム開発
半導体チップを購入して、ゼロから設計と開発をすることを、フルカスタム開発と呼びます。フルカスタム開発の設計の流れは:
1. 半導体チップメーカからBLEの半導体を購入2. 半導体チップメーカの推奨設計例をもとにして、基板回路などを設計3. 電波法の認証 (試作では1台単位、製造では製造設備単位で認証が必要)
となります。製造まで考慮すると、製造時試験の手順決定と技術文書の作成など、多くの項目がありますが、ここでは省略しています。
BLEの半導体には、BLEの通信機能だけがあるものと、BLEの通信機能に加えてマイコンまで内蔵した、いわゆるSoC(システム・オン・チップ)の2種類があります。いずれを採用する場合でも、通信の制御にマイコンは必須です。
BLEの通信機能だけがあるものを使う場合は、その半導体とマイコンの間は、ホストコントロールインタフェースというBluetoothの規格に従ったプロトコルでやりとりをします。既存の製品にBLEを追加する場合で、すでに製品の中にあるマイコンで通信制御まで実現する場合には、この形を取ります。
SoCは、BLEのプロトコルスタックとユーザのアプリケーションが、BLEの半導体に内蔵された1つのマイコンで実行されます。回路面積を小さく、かつ消費電力を最小にできる利点があります。BLEデバイスをゼロから企画する場合で、大きさや電池の持ちに注目するときには、こちらを採用します。
CC2540を使ったファームウェア開発で、TI社のファーム焼きソフトを使っている場合、"データフラッシュの消去"をすると、CC2540のユーザ書き込みMACが0に初期化される。ドキュメントには、ユーザ指定のMACが0なら、メーカ書き込みのMACを使うとあるが、実際には、使っていない。ユーザのMACが0もしくは0xffいずれの場合も、その値を使ってしまう。すべてのデバイスのUUIDがおなじになり、個別識別ができない。ロット単位のエラッタなのかどうかは知らない。なので、フラッシュをクリアしてしまったときは、メーカ指定のMACをコピペで書き込んでおく。
■H3■モジュール
BLEの通信部分を入出力端子が外部に出ている小さな基板に収めたモジュールという部品があります。いろいろな会社からモジュールが出ています。
モジュールを採用する利点は、Bluetoothや電波法の認証を自社で取得する必要がないことです。一方で、モジュールの基板(大変小さくて、1cm角ですが)の形と大きさに製品が制約される場合があります。小型あるいは細長いようなBLEデバイスを開発するときには、モジュールの外形確認が必要になります。
モジュールは、Bluetoothの相互接続認証と電波法が求める工事認証を取得しているため、これを採用すればフルカスタム開発のファームウェア開発を除く手順が省けます。
2012年8月までは、モジュールの工事認証の条件に、モジュールが用意に着脱できること、という条件がありました。これを満たすため、モジュールには“コネクタ”がありました。しかし、2012年8月に、この条件が撤廃されたことで、直接ハンダ付けで固定する表面実装タイプの工事認証が通るようになっています。
■H3■BluetoothとMFiのロゴを掲載するには
Bluetooth対応のロゴ、およびMade for iPhoneのロゴを商品に掲載するには、それぞれBluetoothの相互接続認証の取得とMFiプログラムの参加が必要です。
Bluetoothは、認証費用自体は実費で5万円程度ですが、Bluetoothのメンバーに登録するための年会費が1万ドル必要です。自社で設計開発する場合は、自社でBluetoothの相互接続認証を取る必要があります。たいがいのモジュールは、Bluetoothの相互接続認証を取得しています。この場合は、そのモジュールを利用した派生製品であるとBluetooth対応製品のリストに無償で登録ができます。
Bluetoothのロゴを掲載しなくても、正体不明のRF装置として販売はできますが、iPhoneのようなBluetooth SMART READYな装置に接続することを表示するためには、Bluetoothのロゴは必要です。
iPhoneはBluetooth SMART READYなので、BLEデバイスはiPhoneに接続できます。このBLEデバイスの販売およびアプリのストア認証にMFiプログラムは必須ではありません。しかし、MFiのロゴを製品に掲載したいならば、MFiプログラムへの参加が必要です。
■H3■半導体チップについて
Bluetooth4対応デバイスは、従来の3までのBluetoothとLow Enery両方と接続できるデュアルモードと、 Low Energyだけに対応するシングルモードの2つにわけられる。iPhoneとBLEで接続するデバイスは、BLEのみに対応する、シングルモードデバイスになる。シングルモードデバイスは、無線および制御回路を1つにした集積回路として、テキサス・インスツルメンツ、CSR、およびノルディック社の3社から販売されている。TI社はCC2540およびCC2541の2つのシングルモード集積回路を販売している。価格は2ドル。8051マイコンを内臓しており、BTLEプロトコルスタックをIAR Embedded Workbench IDEのライブラリとして提供している。GPIOおよびADCなどの豊富なIOもあり、BLE接続センサーがワンチップで実現ができる。 CC2541は、BLEに加えてTI社およびノルディック社の独自2.4GHzデータ通信方式も対応している。この独自の無線通信は、例えばマウスやキーボードで独自の2.4GHzの通信仕様を利用している製品をBLEに移行するときに、従来の独自通信技術に対応させつつ、かつBLE対応が求められる場合に使われる。チップサイズは6mm角。
CC2540/2541の開発は、IAR Embedded Workbench 8051を使う。モバイルライセンス、フルセットで 35万円ほど、機能限定版で 25万ほど。また、保守(更新)は、最初3ヶ月は無料、年間更新料として購入価格の20%がかかる。CSR社は、ウェブサイトで概略しか情報を公開していない。TI社のCC2540同じようなマイコンを内臓したものを販売している。BLEの開発部門はサムスンの出資をうけている。このため、純粋な半導体メーカとして続くのかは、不安に感じるところがある。ノルディック社は、nRF8001およびnRF8002を販売している。nRF8001は、TI社のものと違い、BLEの プロトコルスタックまでを提供しており、制御はACIインタフェースをとおして別のマイコンで実現する。 nRF8002はnRF8001に、キーレスエントリーのようなキーホルダーに使われる近接等のプロファイルを実 装したもので、BLEで最もよく使われるキーホルダー的な機能が実現できる。チップの価格は3ドル程度 (Mouserで274円、80円/ドルより)。チップサイズは5mm角。またCortex-M0+を搭載したSoC、nRF51シリーズを発表している。ノルディック社が提供してきた独自規格の2.4GHz通信とBLEに対応したものが出荷されている。この開発環境はKeil MDK-ARMを使います。このライセンス料金は、30万円程度です。このSoCのファームウェア開発方法は、ARM Cortex-M0+の手順そのままです。
■H3■モジュール
この他に、BlueGiga社はTI社のCC2540を採用したモジュールを販売しています。このモジュールは、IAR WorkbenchのようなC言語開発環境の代わりに、BASICのようなスクリプト開発環境を独自に提供している特徴があります。また、FCCとCEを取得しており、Bluetoothの相互接続認証を取得しています。ですからBluetooth対応の製品リストに無償で登録ができるので、Bluetoothのロゴを表示して販売ができます。
■H3■許認可の取得
■H3■プロトタイピングのプラットフォーム
KonashiとかサブレーとかRFduino。nRF8001を使った、BLE112を使ったArduinoシールド。BLEのなんとかBee。Seeedstudioで購入可能なもの。タイプとしてUSBドングルモジュール半導体(HCI)
ファームウェアの問題、書き換え。何かをさせるトリガー的なもの。PICの環境、Arduino側マイコン。IOに特化個別開発環境は、やっぱりきっついので、使い慣れたもの、フィジカルコンピューティングで定評がある環境。
■H2■7.8　はまりどころ
通常のコネクションする使い方ならば、ハマるところはない。強いて言えば:
- CBPeripheralは自分でretainしないといけない	- scanForPeripheralsWithServicesで取得したCBPeripheralはアプリ側でretainしないといけない- デバイスから強制定期にBluetoothの接続切断をすると、iOS6では、CoreBluetoothが例外を飛ばしてくる	- try~catchして処理
このほか:
- iPhoneが接続したことがないBLEデバイスのUUIDは、アドバタイズメント・パケット受信時はnull	- iPhoneが、任意のアプリで一度でも接続したことがあれば、UUIDが取得できる。iPhoneの電源On/Offをしてもクリアされない。どっかにキャッシュをもっているのだろう。- iOS6では、iPhoneからBLE接続を切断しても、iPhoneは30秒〜1分程、BLE接続をもっている。このためBLEデバイスからアドバタイズメント・パケットが送出されない	- アドバタイズメント・パケットを利用する場合は、デバイス側から強制的にBLE接続を切断する。
このように、細かい所で、iOS5とiOS6で振る舞いが違うところ、タイミングのパラメータ値が違うような些細だけど、使い方によっては致命的になる、ところがある。しらないと、はまるので、事前の確認をしっかりすること。
■H2■7.9　開発方法のおすすめ
BLEのハードウェア開発は、次章で述べるように、組み込み開発が必要になるために、どうしてもiOS単体で閉じた開発に比べて、時間がかかる。
iOS6では、たぶん、ペリフェラル側もiPhoneでプロトタイピングするのが、よいのではと思っている。BLEデバイスの開発には、ハードウェアそれ自体が特別なセンサーを利用しているか、またBLEの開発の中心は、ハードウェアなのかそれともデータ処理のアルゴリズムなのか、で区別してみる。
まずBLEが特殊なハードウェアを使うものであれば、iPhoneにそのハードウェアの機能がないので、プロトタイピングにはならない。しかしダミーデータを流す程度には使える。
BLE開発が、データ処理に価値がある場合がある。例えばフィットネス関連のBLEデバイスは、ほとんどが、加速度を使う。加速度から消費カロリーや歩数、高度の変化などを算出するのは、データ処理になる。このような、iPhoneにもあるハードウェアを利用し、その開発の工数の多くがデータ処理の場合には、iPhoneでのプロトタイピングは絶大であろう。
iPhoneでプロトタイピングしたソースコードをマイコンに移植すればよい。そのソースコードは、当然ながら、マイコンの性能に合わせて書きなおさなければならないかもしれないが。
BLEのデバイス自体は、とても簡単な回路ととても単純なデータ処理をする設計が多い。電力消費量とデバイスの大きさを考えれば、そのほとんどの処理はiPhone側に持たせたほうが、合理的で利点があるから。
■H2■7.10　iOSアプリケーションの実際
■H3■シミュレータでBluetooth LEのデバッグ
加速度、向き、モニタリング。セントラルとペリフェラル。
大量のデータを送るには。すれちがい通信的な使いかた。
■H3■トラブルの原因切り分けと対応
Appcessoryという単語が示す通り、Bluetooth LEデバイスとiOSアプリケーションそしてネットワークの先にあるサービスが連携して初めて、魅力あるBluetooth LEデバイスという製品になります。しかし、意図せぬ振る舞いが、開発中また販売後に起きるかもしれません。ここでは、iOSアプリケーションとBluetooth LEデバイスが意図しない振る舞いをすることを、トラブルと呼びます。
トラブルが発生した場合は、原因の切り分けが必要です。そのためには、トラブルを再現する方法や発生条件を明らかにすることが必要です。これらのタスクは、ユーザから情報を集めるような対人タスクと、与えられた条件から現象を論理的に分析する純粋な技術タスクに分けられます。具体的なトラブルは予測困難ですが、発生しうるトラブルの種類を列挙して、タスクの割り振り役および分野ごとの担当者などを、開発チームで事前に決めておくことが重要です。
トラブルの原因が設計によるものであれば、それは、iOSアプリケーション単体によるもの、Bluetooth LEデバイス単体によるもの、および両者の振る舞いの組み合わせによるもの、の3通りです。また、それが分析できるのはBluetooth LEデバイスの設計者か、iOSアプリケーション開発者のいずれかです。
ほとんどのトラブルは、iOSアプリケーション開発者の初歩的なミスが原因です。例えば、CBPeripheralのインスタンスをリテインし忘れたために接続が解除された、のようなケアレスミスによるものが多いです。開発過程での、ケアレスミスによるトラブルで発生するやりとりを防止するには、Bluetooth LEデバイス開発側が、iOSアプリケーションのCore Bluetoothフレームワークを使う部分まで含めて、開発を担当することが有効です。
iOSアプリケーションとBluetooth LEデバイスの振る舞いの組み合わせがトラブルの原因の場合は、両者の振る舞いをログを取りながら突き合わせるか、あるいはBluetooth LEの通信パケットをロギングして解析します。いずれの場合も、iOSとファームウェアおよび通信の知識が不可欠になるため、領域ごとの担当者が個別に担当するのではなく、同じ場所と同じ時間を共有して対処にあたるように、事前に決めておくことが重要です。
使用しているBluetooth LEデバイスが、市販品とその付属ライブラリを利用しているのか、または独自に設計しているのかで、対処が異なります。市販品の場合は、ライブラリのソースコードが公開されているならば、ソースコードを読むことが原因を見つける早道です。もしもソースコードが公開されていないならば、Bluetooth LEの通信パケットをロギングして解析するほかありません。独自に設計したデバイスを使用しているならば、ファームウェアのソースコードもつきあわせて、開発者間で振る舞いを1つ1つ確認していくのが、早道です。
■H2■7.11　開発環境とターゲット
4S以降、環境iOS5以降Xcode
■H3■参考情報源
△https://developer.apple.com/library/ios/documentation/NetworkingInternetWeb/Conceptual/CoreBluetooth_concepts/AboutCoreBluetooth/Introduction.html☆
△https://devforums.apple.com/community/ios/core/cbt☆
△https://lists.apple.com/mailman/listinfo/bluetooth-dev☆
■H3■Bluetotoh LEに対応するiOSデバイスとOSのバージョン
Bluetooth LEに対応するには、ハードウェアとOSがそれぞれ対応しなければなりません。
Bluetooth LEはBluetooth4の規格の一部です。スマートフォンのハードウェアの仕様に、Bluetooth4対応と書かれていれば、それはBluetooth LEにも対応しています。iOSデバイスは、2011年10月に発売されたiPhone4S以降の全てのデバイスがBluetooth4に対応しています。2013年8月時点で、Bluetooth4に対応するiOSデバイスは、iPhone4S、iPhone5, 第5世代iPod touch、第3および第4世代iPad、そしてiPad miniです。
Bluetooth LEに対応するOSのバージョンは、iOS5およびiOS6です。Core Bluetoothフレームワークは、iOS5以降のSDKに含まれています。初めてBluetooth LEをサポートしたiOS5はセントラルの機能を提供しています。次のiOS6では、セントラルに加えてペリフェラルの機能にも対応しました。セントラルおよびペリフェラルについては次の節で述べます。
iOS5およびiOS6は、iPhone3GSおよびiPhone4などの、ハードウェアがBluetooth4に対応していないiOSデバイスにも対応しています。Core Bluetoothフレームワークは、アプリケーションが実行されたデバイスがBluetooth LEに対応しているかいなかを、デリゲートを通してアプリケーションに知らせます。
Bluetooth LEを使うアプリケーションの振る舞いが、機種により異ならないかは、大きな関心事です。もしも振る舞いが異なるならば、どのiOSデバイスでどのように異なるのか、またその理由を理解して、テスト項目に入れなければなりません。筆者の知る範囲では、iOSデバイスの機種間で振る舞いが異なることはありません。
デバイスごとの差異が生じるうる要素には、アンテナ設計、無線通信の半導体およびその内部で動作するファームウェア、そしてiOS側の通信制御プログラムがあります。
アンテナは機種ごとに異なります。アンテナ自体の利得および指向性が異なるかもしれません。Bluetooth LEで通信をするだけであれば、利得の違いは通信可能距離の大小として見えます。検出される電波強度の絶対値が異なりますから、電波強度を用いる応用例では、その違いが振る舞いを変えるかもしれません。例えば、電波強度による近接検出ならば、近接と判断する距離が機種により異なってくるでしょう。
無線通信の半導体は、Bluetooth規格に従い実装されるので、半導体による機能の違いはないはずです。また[iFixit](△http://www.ifixit.com)☆が報告しているiPhoneの内部構成をみると、無線通信の半導体は、iPhone4SとiPad3はBroadcom社のBCM4330、iPhone5とiPad miniとiPod touch 5th Genは、同じくBroadcom社のBCM4334を採用しています。BCM4330からBCM4334の変更点は、半導体の製造プロセスが65nmから40nm LPに変更され、受信動作時のピーク電流が68mAから36mAに半減したことです。ですから、ただし、受信動作による電池消費量は、機種によって2倍違うでしょうが、ハードウェアの機能の違いはないでしょう。
iOS側の通信制御プログラムは、iOSのメジャー番号が変わると異なることがあります。またマイナーバージョンで、バグの修正や動作をより安定にする変更が入ります。動作保証対象となるiOSのバージョンごとに、動作の確認が必要です。
<!-- iPhoneそれぞれが使っているモデムの半導体の番号を確認する --><!-- 機種ごとの振る舞いの違いがあると、いやんなので、半導体型番が同じ=タイミングの振る舞いも同じだろうと、裏付けるための情報 -->
<!-- iPhone4 △http://www.ifixit.com/Teardown/iPhone+4+Teardown/3130/3☆ Broadcom BCM4329FKUBG --><!-- iPhone4S △http://www.ifixit.com/Teardown/iPhone+4S+Teardown/6610/2☆ ムラタのモジュール Murata SW SS1830010. 他のサイト △http://eetimes.jp/ee/articles/1110/17/news109_5.html☆ ではレイアウトの刻印から  BCM4330 -->
<!-- iPad3 4G △http://www.ifixit.com/Teardown/iPad+3+4G+Teardown/8277/2☆ Broadcom BCM4330 802.11a/b/g/n MAC/baseband/radio with integrated Bluetooth 4.0+HS and FM transceiver--><!-- Single-band 2.4 GHz 802.11 b/g/n or dual-band 2.4 GHz and 5Ghz 802.11 a/b/g/nFM receiver and transmitterBluetooth Core Specification Version 4.0 + HS compliant with provisions for supporting future specificationsFull WAPI software and hardware supportAn integrated ARM® Cortex™-M3 processor and on-chip memoryThe OneDriver™ software architecture for easy migration from existing embedded WLAN and Bluetooth devices as well as future devicesSmartAudio® technology that dramatically improves voice quality in Bluetooth headsets -->
<!-- iPod touch 5th Gen △http://www.ifixit.com/Teardown/iPod+Touch+5th+Generation+Teardown/10803/3☆ Murata 339S0171 Wi-Fi module -->
<!-- iPad mini △http://www.ifixit.com/Teardown/iPad+Mini+Wi-Fi+Teardown/11423/1☆ Murata 339S0171 Wi-Fi module.  BCM4334 △http://www.ifixit.com/Teardown/Apple+A6+Teardown/10528/2#s38332☆ -->
<!-- The Murata Wi-Fi SoC module actually comprises a Broadcom BCM4334 package in addition to an oscillator, capacitors, resistors, etc. You can see all the components in the X-ray (third image).Murata assembles all of the components together and sends their package to Foxconn, where it eventually ends up on the iPhone's logic board. Chipworks said it best: "Murata makes a house that is full of other people's furniture."Here are the die images for the Broadcom BCM4334, fabricated in Taiwan at TSMC on a 40 nm CMOS process. Its key features:Wi-Fi (802.11 a/b/g/n)Bluetooth 4.0 + HSFM Receiver -->
<!-- iPhone5 △http://www.ifixit.com/Teardown/iPhone+5+Teardown/10525/2#s38299☆ Murata 339S0171 Wi-Fi module , 上記のiPad  miniと同じもの-->
<!-- △http://www.anandtech.com/show/5601/broadcom-announces-new-combo-chips-bcm4334-bcm43241-shows-80211ac-once-more☆ --><!--First is BCM4334 which is the follow-up part to BCM4330 that we've seen in a bunch of devices. BCM4334 changes from a 65nm process to 40nm LP, which itself offers a power profile reduction. The change isn't a simple die shrink either, Broadcom says it has worked on and refined the existing BCM4330 design and reduced power a further 40-50% and dramatically reduced standby power by 3 orders of magnitude. I asked Broadcom to give me a realistic estimate of power consumption - BCM4330 in full Rx mode consumes around 68mA, BCM4334 consumes 36mA at the same voltage, just to give an example of the reduction. Air interfaces don't change between BCM4330 and BCM4334. The second part, BCM43241, is a 2x2MIMO combo chip that's geared at tablets and also is built on a 40nm process. -->
■H2■7.12　周辺機器を使う
■H3■どんな周辺機器があるのか。
Keyfob、Kickstarterでたくさん。NODE、LUMOBACK、脳波、心拍、感圧ペン。自転車関連。ライブラリを公開している。Wahooフィットネスとか。センサー系、IO系。単体で機能をもたせるというのより。
■H3■Keyfob
切断時の振る舞い、近接の使いかた、
■H3■心拍センサー
生体情報の基本。プロファイル、サービス。機種によって、R-R間隔とか。使うには、ライブラリ、自分で使う。サンプルコード。
■H3■TI センサータグ
汎用に使える、試作に、小ささと価格。サンプルコード、認証とか改造するのは、Wikiを参照。微妙なのよね。
■H2■7.13　シミュレータでBLE
iOSのBLE開発で、シミュレータでBLEを使うには、内蔵のBTアダプタは使えない。NVRAMを設定して、本体ではBLEアダプタを掴まないようにして、シミュレータに直接かませる。使用出来るドングルに制約があるみたい。MLを見ると、BroadcomはNG、CSRはOK。市販のBT4のUSBドングル。Amazonで購入できるものを試してみる。
- dongle list- 日本語
■H2■7.14　その他
△http://developer.apple.com/library/ios/#technotes/tn2295/_index.html☆
Technical Note TN2295Testing Core Bluetooth Applications in the iOS Simulator
iOS 5.0 provides the Core Bluetooth framework for creating iOS applications, which can detect, connect, and communicate with Bluetooth 4.0 Low Energy (LE) devices. The standard method for testing Core Bluetooth applications is on a device such as the iPhone 4S, which has Bluetooth LE support. In order to facilitate the development of Core Bluetooth iOS applications when one does not have a Bluetooth LE iOS device, the iOS 5 SDK simulator can be used to test these applications with the help of a third-party Bluetooth LE USB adapter. This Technical Note describes the process to enable and verify simulator support on an OS X system.
iOS5.0はiosアプリケーションを作るのにCore Bluetoothフレームワークを提供しています。BLTEデバイスの発見、接続と通信をする。Core Bluetoothアプリケーションの標準のテスト方法はiPhone4SのようなBluetooth LEをサポートする実際のデバイスで実行すること。Bluetooth LE iOS デバイスを持っていない開発者が開発するために、iOS5 SDKシミュレータは、3rdパーティのBluetooth LE USBアダプタの助けでアプrケーションをテストするのに使うことができる。このテクニカルノートは、OS X システムで、有効にして確認する。
注意書きとして、iOSシミュレータが実機と異なる振る舞いをしたときは、バグレポートを送れと。注意書きとして、シミュレータだけで動作確認をおわらさせず、必ず実機で確認しろと。
必要なもの- Mac system with Mac OS X 10.7.3 or greater- Xcode 4.2.1 with iOS 5 SDK or greater- Bluetooth LE USB adapterビルトインでBTLEサポート(BT4搭載)していても、必ずUSBアダプタが必要なのが注意点。
■H3■手順
■H3■NVRAM の設定。
ターミナルを開いて、NVRAMコマンドを次のように入力する。
	user$ sudo nvram bluetoothHostControllerSwitchBehavior="never"	Password:********
keyと値は、大文字と小文字を区別する。スペルミスに注意。
システムの再起動は、これを実行した直後では、不要。なぜこのステップが必要なのかは、see section Understanding the OS X Bluetooth Driver Behavior
■H3■Bluetooth LE USBアダプタを接続する
必ず、NVRAMの設定をしたあとに、Bluetooth LE USBアダプタを接続する。
■H3■NVRAM設定を確認する
システム情報アプリケーションを開いて、システムBluetoothドライバがビルドインBluetooth ホストコントローラインタフェース(host controller interface HCI)とマッチしているか、確かめる。Hardware->Bluetoothセッティングで、Vender IDが"0x5AC"であることを確認。
<!-- 図を入れる-->
もしもシステムBluetoothコントロラーがBluetoth LE USBアダプタにマッチしていたら、iOSシミュレータは外部Bluetooth コントローラをBluetooth LEサービスに使えない。この場合は、図2のシステム情報Bluetoothパネルのように。Bluetoothドライバが、Cambridge Silicon Radio(CSR)Bluetooth LE USB adapterにマッチしている。この場合、アダプタを外して、ステップ1 NVRAM設定、に戻る。
■H3■Bluetooth をiOSシミュレータで有効にする
XcodeでiOS 5 iPhone/iPadシミュレータでiOSをランチする。iOSシミュレータが起動したら、アプリケーションを閉じて、設定アプリを選択して、一般タブで、BluetoothをOnにする。
シミュレータのiOSアプリケーションを咲き起動。iOS Core Bluetoothアプリケーションは、Blueooth LEデバイスに接続して通信するはず、Bluetooth LEサポートが有るiOSデバイスで実行された時のように。
注意書き:もしも知っステムにBluetooth LEアダプタが接続されていないなら、Bluetooth設定をOnにすることはできない。Bluetooth4.0サポートがないときにシミュレータを実行したら、-[CentralManager state] は  CBCentralManagerStatePoweredOff を返す。Bluetooth LEサポートがないiOSデバイスで実行したときは、、-[CentralManager state] は  CBCentralManagerStateUnspportedを返すだろう。
■H3■実際
- OS X 10.8.4- Xcodeデフォルト設定は、
	nvram -p | grep bluetoothHostControllerSwitchBehavior
何も設定されていない。(空文字列。-d で削除できる。) 刺しても、外部BTに写らないみたい。
設定しないと動かなかった。ハードウェアで見ても、切り替わりがよくわからないのか？iOSシミュレータをリセットすると、UUIDがNULLになっていた。キャッシュのクリア状態が再現できるんだな。
本体のBT On/Offは関係するか？わからない。ただ、iOSシミュレータをリセットしたら、Keyfobが繋がらなくなった。アドバタイズはとれているけど。これはなぜ？実機でアプリを動かすとすぐに接続しているから、この振る舞いはシミュレータ依存であろう。
iOSシミュレータを動かしている時にUSBドングルを抜くと:
	2013-06-26 14:11:54.547 KeyFobSample[12153:1b0b] CoreBluetooth[ERROR] XPC connection interrupted, resetting	2013-06-26 14:12:03.512 KeyFobSample[12153:c07] CoreBluetooth[WARNING] <CBConcreteCentralManager: 0x8c49c40> is not powered on
ステートがOffに変更される。iOSシミュレータを起動したまま、USBドングルを挿すと。BluetoothがOff状態からOn表示になった。アプリのほうは、USBの抜き差しで、アドバタイズの受信動作が止まっているみたい。アプリは再起動すれば動く。
■H3■ドングルの動作確認
* プラネックス BT-Micro4 △http://www.planex.co.jp/products/bt-micro4/☆ 価格2000円、実売1100円(Amazon)*  CSR8510* バッファロー BSHSBD08BK △http://buffalo.jp/products/catalog/supply/bluetooth/bluetooth/adapter/bshsbd08/☆  価格2509円 実売1300円* CSR8510
■H3■OS X Bluetooth ドライバの振る舞いを理解する
デフォルトのOS X Bluetoothドライバは、外付けのBluetooth HCIがアタッチされたら、ビルドインのBluetoothインタフェースからドライバが離れて、外部HCIにアタッチする。もしもHCIがAppleデバイスじゃなければ。この振る舞いは、Bluetooth LEアプリケーションを開発するOS Xアプリケーション開発者にとっては利点。古いMacを持っていて、ビルトインがBluetooth LEをサポートしていないなら。開発者は、Bluetooth LE USBアダプタを、その新しいHCIにシステムBluetoothドライバがアタッチして、OS X Core Bluetoothアプリケーションが実行して、そのアダプタを通してBluetoooth LEサービスがアクセスできると。一方で、ビルトインドライバを通して提供されていた既存のBluetooth接続は失われる(HIDデバイスとか。キーボードやマウスなど)
ところが、iOS Core Bluetooth開発者には、この振る舞いはiOSシミュレータとコンパチブルじゃないの。iOSデバイスと全く同じようにBluetoothの振る舞いをシミュレータがしようとすれば、Bluetooth LE HCIを直接開かないといけない。もしも内蔵のドライバが外部Bluetooth LE HCIに自動的にアタッチされたら、シミュレータは外部HCIで接続を開くことはできなくなる。ドライバのマッチングの振る舞いを制御するのに、ビルトインBluetoothドライバはbluetoothHostControllerSwitchBehavior NVRAMセッティングを認識する。もしも"never"なら、外部Bluetooth LEアダプタが接続されたとき、システムドライバは外部HCIをサポートするようにスイッチしたりは、しなくなる。OS XビルトインBluetoothドライバの振る舞い。
* bluetoothHostControllerSwitchBehavior="never"** あたらしいHCIが接続されたら、ビルトインドライバは、ビルトインHCIにアタッチされたまま。* bluetoothHostControllerSwitchBehavior="always"** 新しいHCIが接続されたら、ビルトインドライバはビルドインHCIから切断して外部のHCIに接続される。* bluetoothHostControllerSwitchBehavior="default"** 新しいHCIが接続されたら、ビルドインドライバはビルドインHICから切断されて、外部のHCIに接続される。もしも新しいモジュールがAppleモジュールじゃなければ。
■H3■OSX Bluetooth LEアプリケーションをテストする
iOSとOS X、両方でBluetooth LEアプリケーションをテストするなら、bluetoothHostControllerSwitchBehavior setting を復元しないといけないかも。
2つのケースがあり:ビルトインBluetooth LEのシステムでiOS / OS X Blueotooth LE アプリケーションをテストビルトインなら、NVRAMの bluetoothHostControllerSwitchBehavior="never" setting のままにしておく。iOSシミュレータは外付けHCIを、OS Xアプリケーションは内蔵HCIを使う。
ビルトインがない場合:OS Xのアプリケーションをテストするなら、bluetoothHostControllerSwitchBehavior setting to the "default"にする。iOSのアプリをテストするときは、"never"に切り替える。
■H2■7.15　スニファの準備と使い方
■H3■前知識
スニファ？BTLEでパケットをダンプする。振る舞いの切り分け、通信状態を見る。アプリから見た振る舞い、アプリ自体、iOSのBluetooth LEの振る舞い、通信自体の振る舞い、接続先のファームウェア、その装置の捜査状況。切り分け。通信部分。専用機器、(500ドルから1000ドル程度かな？)。ちょっと見るには、高価。
安価。TI社。
注意:無線。アドバタイズメントが3チャネルあるから、たまたまモニタしているチャネルで通信が始まれば、追跡できる。専用のもの。高価。TI開発キットのものを流用。CC2540MINIDK_Dongle
■H3■資料
△http://processors.wiki.ti.com/index.php/BLE_sniffer_guide☆
■H3■手順
- 購入- ファームウェアをUSBドングルに焼きこむ- パケットスニファのアプリケーションを起動する
■H3■環境
Windows xxx
■H3■買い方。
△http://www.ti.com/tool/CC2540DK-MINI☆CC2540DK-MINI99ドル
△http://www.ti.com/tool/cc2541dk-mini☆CC2541DK-MINIでもOK。
△http://www.ti.com/tool/cc2540emk-usb☆CC2540EMK-USB
違いは、KeyfobがCC2540かCC2541か、という違い。CC2541は、CC2540のUSBをなく、RFの消費電流を削減したもの。USB接続が不要な場合は、こっちのほうが適している。
BlueGigaのモジュールはUSBのも、ROMが128kBで、スニファには流用出来ませぬ。ドングルはデフォルトでスニファのファームウェアが書き込まれている。The CC2540 dongle is delivered pre-programmed with dedicated packet sniffer firmware.
<!-- デフォでファームが書き込まれている。これをやるのは、評価用とかで使っちゃったとか、バージョンが上がって、ファーム更新のときのみ -->
■H4■フラッシュプログラマのDL
△http://www.ti.com/tool/flash-programmer☆v2じゃない方”Flash Programmer for 8051-based CCxxxx SoCs and RF Evaluation Boards”とある方をDL。
注意:Windows VistaまたはWindows7では、インストール開始直後に”User Access Control”ダイアログが表示されるかもしれない。ユーザが管理者権限を持っているならば、"yes”ボタンを押してインストールを継続する。もしも管理者権限がないなら、管理者権限のあるユーザIDとパスワードを入力する。
■H3■スニファをDL
△http://www.ti.com/tool/packet-sniffer☆からアプリをDLする。SmartRF Packet Sniffer runs on Windows 98, Windows 2000, Windows XP (32 bit), Windows Vista (32 and 64 bit) and Windows 7 (32 and 64 bit).
■H3■ファームを焼きこむ
プログラマの起動デスクトップアイコン、スタートメニューのFlash ProgrammerC:\Program Files (x86)\Texas Instruments\SmartRF Tools\Flash Programmer\bin\SmartRFProg
最初に、CC DebuggerをUSBに接続。このDebuggerのファームウェアが古いと、警告画面が表示される。ファームウェアの更新。上のプルダウンメニュー、”Program CCっっxSoC or MSP430”になっているのを、選択して、”Program Evaluation Board”を選択して、右にある”Update EB Firmware”をクリック。ファームウェア更新完了。
上のプルダウンメニュー、”Program CCっっxSoC or MSP430”に戻す。USBドングルを接続。電源さえあればいいので、電池とか他のUSBポートでもOK。接続して、CC Debuggerの本体にあるリセットボタンを押して、リセット。
	\program files\Texas Instruments\SmartRF Tools\Packet Sniffer\bin\general\firmware\sniffer_fw_cc2540_usb.hex
ファームウェアを選択して、"Erase, grogram and veriry"を選択、”Perform actions"を押せば、書き込み開始。プログレスバーがフルになればOK。
USBにドングルをさして、デスクトップアイコンのSmartRF Packet Snifferを起動。
■H3■パケットの見方
■H3■Tips
パケットスニファには、スニフしたパケットを、UDPパケット	で送信する機能がある。PDFマニュアルのSWRU187G、2.4 Packet broadcast.14ページ。
外部アプリケーション、テストの自動化に使えるかもね。
暗号化している場合は、Long Term Keyをテキストファイルにして置くことで、解析可能らしい。暗号化は、パケットのタイミング、送受信パケットの順番でやっているから、1つでもパケットの受信をミスすると、デコードできなくなる。
タイムアウト。普通はパケットをスニフしているからタイムアウトがわかるけれども、もしもパケットを受信ミスしてて、タイムアウトしたら、スニファはタイムアウトとわからず、そのまま受信し続ける。もしも本当に通信がタイムアウトしているなら、手動で止めればいい。
