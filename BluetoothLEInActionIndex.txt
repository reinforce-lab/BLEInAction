うれしい、たのしい、びーえるいー
	はじめに

	第1章

		あなたとBluetooth Low Energy
			Bluetooth Low Energy
				機械と機械の無線の会話。対応ハードウェア。アプリケーション。閉じたローカル。
				機械の間の通信規格。外国語を覚える。通訳、旅行で自分で、文書を読む。書く。仕事。
			やりたいことは何か
				自分/他人
					A. 自分で作り、自分で使う
					B. 自分で作り、他人が使う
					C. 他人が作り、自分が使う
					D. 他人が作り、他人が使う
					Cは消費者。A,Bかと思うけど、実はBだけじゃなくてDは事業者。その理解も必要。
			どのような関わり方をするのか
					自分で作り自分で使う。仕組みを理解して使う。不具合。ループ。1つ。
					他人が使う。製造者責任、サービスとして、作りこみ。後から来る費用と手間。サービス
					どのくらいの数量? 数個、数百個、数万個、数百万個。
					時間の話。すぐ使う、流通して長く経過してからたどり着く。
					それが本業、それともおまけ? プラットホームの話。
			具体的な行動
					ホビー:作る、動かす。
						1対1
					事業:自分のサービス。
						フロー:ハードウェアの設計、ファームウェア、アプリ、(クラウド)サーバー
						雇用する、外部に製造、設計、調査など、委託する。
						課金方法。ハード売上、月額課金。使えなくする。利用情報がわかる、繋がる。
					立ち上げ:開発フローから事業として安定するまでの時間。
			知りたいこと、知るべきこと
				ハードウェア(金物):無線や規格の認証。コストなど最適化。
				ファームウェア:体験のハード側。
				ソフトウェア:アプリケーション、体験。
				事業の立ち上げ:量産、品質管理、流通と販売、サポート。ディレクター、プロデューサー。
				プラットホームへの統合:戦略。MESH技術、独自プラットホーム。ファーム更新。
				深さ:とりあえず動けばOK。何万台も作って動くように。(多様な環境、時間軸、電池が腐る)

	 Bluetooth無線技術とBluetooth Low Energy
	 	  無線通信規格の役割
				通信には必ず通信相手が必要。通信相手とは同じ通信の知識を共有していなければならない。
	 	　歴史と発展
				無線通信技術。
				情報通信社会、通信をベースにした社会。
				パソコンの裏側、無線通信、コスト。モバイル化。必然としてコネクタはNG。拡大できない。
		 いくつもある無線通信技術との比較
		 		周波数帯、方式、費用(製造とランニング)、設定、初期化。破棄までの流れ。
		 超低消費無線通信技術の統合
		 		無線通信から異なる。秘訣は、短時間のオンだけで完了する通信。イベントを伝える通信。
				ハードウェアの抽象化、ATT/GATT。
		 Bluetooth Low Energyのエコシステム
		 		iPhone4Sから始まった。プラットホームとしての展開。
		 		アプリケーションへの開放。ハードウェアは自動的に。BTが4になると半ば強制で。
				他のOSは。Android、Windows、Linuxの対応。ドライバ、アプリケーションからの利用。
		 アプセサリの登場
		 		アプリケーション、サービスと統合されるハードウェア。
				フィットネス、Keyfob、近接検出、自動ログイン、WiFi設定、ANCS通知。メガネ的なもの。

		技術とその活用
			活用例
				既存分野での発展的利用、教育、プラットホーム的なものとして。
			発想方法
				プロトタイピング、作らない方法。
			開発フロー
				外に出すのか、自分たちで作るのか。手短な何か。
			チームの作り方
				雇うのか、組むのか。

		まとめ
			無線通信技術は、この100年間で社会を大きく変化させてきた技術です。
			Bluetooth Low Energyは、スマートホンを土台にしたエコシステムで、急速に普及しました。
			多種多様なものに使うための、超低消費電力とデータ表現能力、セキュリティがあります。
			アプセサリ、という言葉が生まれるように、目に見えない関わり方の活用があります。
			独自のハードウェアではなく、プラットホーム利用ができます。
　


作ってみよう
	自分で作って使う
		BLEを活用する必要最小の知識
		発想を機能と流れに分けてみる
		作る環境はどれを選ぶか
		どこから始めるか、困った時は
	チームでプロトタイピング
		プロトタイピングの段階とその担当	(ブレスト、実験、試作の繰り返し、製品化)
		アイディアを手段に落とし込む 		(物理センサと、設置場所での測定対象、そして体験)
		トラブルとその事前回避		(開発チームの距離、プロトと量産設計の違い)
	開発例
		micro:bitとmakecodeを使う
		スポーツ用品をBLE化してみる
		通知デバイスやビーコンを作る
	まとめ
		- ハードウェア、ファームウェア、アプリケーションの3つが必要です。
		- 個人開発で全てを詳細学習は、量が大きすぎます。サンプルがある既存の何かからスタートしましょう。
		- 同じハードウェアでも、サービス次第で、まるで異なるものとなります。目的となるサービスの手段として適切なのか、あるいは適切にできるのかの確認が、試作です。
		- 予期せぬ事態は、いつも起こります。そのようなトラブルは、早く見つけて、早く相談して、小さく解消することが重要です。組織をまたぐと、それはできなくなります。

BLE技術
	BTの歴史
		無線通信規格の役割とその運用
		技術の登場とその展開
		技術のバージョンとロゴの変遷
		他方式との比較	(WiFi, LoRaWAN, LTE)
		エコシステムとその普及
	通信のレイヤの構成と役割
		レイヤ構成(物理、リンク、ATT/GATT、セキュリティ)
		レイヤを垂直につらぬく仕様、GAP
		物理ビットレートと実効ビットレート
		セキュリティとは
	物理層
		電波で信号をやりとりする。物理的な信号の強さと、シャノンの定理。
		変調方式、そして周波数と適応ホッピング。チャンネル。
		パケットのフォーマット
		仕様拡張: 拡張されたパケットフォーマット
		仕様拡張: 高速化と長距離通信。2Mbps、コーデッドPHY
	アドバタイジング
		存在を知らせるブロードキャスト
		スキャンとレスポンス
		アドバタイジングの拡張
	リンク層
		接続と切断
		L2CAPの役割。
		チャネルと役割。GATT、SMP、L2CAP Connection Oriented Channel。
	ATT/GATT
		ATTとGATTの関係
		ATTの構成
		プロファイルとサービスそしてキャラクタリスティクス
		サービスの問い合わせと取得
		ノーティフィケーションとインディケーションの違い
		暗号化と署名
	代表的なサービス
		サービスチェンジ
		デバイスインフォメーション
		時間
	L2CAP Connection oriented channel
	セキュリティ
		BLEでのセキュリティの実装	(ハードウェアによるもの、規格で保証、拡張可能)
		ペアリングとボンディング
		暗号化方式と追加された暗号化方式
		鍵の交換
		暗号化そして署名への利用
	群としての通信に向けて
		BLE mesh
		BLE IPv6(6LowPAN, MQTT, RESTful?)
	まとめ
		- BLEの仕組みは、発見、接続、通信、切断の流れで、とてもシンプルな設計。
		- データが流れ続ける用途ではなく、とても小さな情報量を、たまにやりとりする場面に適した、削ぎ落とした技術仕様である。
		- 規格は拡張されている。高速化、長距離化、インターネット技術の利用に向けたパケット長を伸ばす。
		- 通話などを想定して、ストリーミングの適用で、channelなど、技術が拡張されている。これはヘッダ削減による効率化にはなる。プロファイル定義がないので、活用例はない。

iOSのアプリケーション開発
	iOSのプラットホーム利用
		周辺機器とその利用(開発することがまずないだろう)
		GamePad,キーボード,MIDI,ANCS
		HomeKit,iBeaconロケーション
		CoreBluetoothフレームワークの役割
		デバイスの能力と制約(iOS, Watch OS, TVの能力)
	CoreBluetoothフレームワークとその構造
		バックグラウンドとフォアグラウンドの振る舞い	(消費電力のイメージ)
		デバイスの発見、接続、通信、切断
		デーモンとプロセス間通信
		セントラルとペリフェラル
		サービスとキャラクタリスティクス
	シンプルなセントラルを作る
		機能確認と機種の判定
		プライバシー設定とユーザ許可ダイアログ
		スキャンと発見
		デバイスの識別と接続の復元
		サービスとキャラクタリスティクスの検索と取得
		キャラクタリスティクスの読み書き
	シンプルなペリフェラルを作る
		機能確認と機種判定
		サービスとキャラクタリスティクスの構築
		セキュリティオプションの設定
		アドバタイジングと接続受け付け
	さらに作り込む
		ペアリングとボンディング
		連続した書き込みとそのバッファ
		サービスチェンジ
		L2CAP connection oriented channel
	開発の豆知識
		よくあるハマるところ	(キャッシュの不一致、サービスが見つからない、ボンディングのし忘れ、再現してフローにする?)
		コネクションインターバルとその変更
		汎用のBLEアプリの利用
		プロビジョニングを使ったロギング
		物理的なスニフィング			(アドバタイジングのチャネルの限定?)
		デバイスインフォメーション・サービスの活用
		ちょっと便利なSwiftのextension
	まとめ
		- セントラルとペリフェラル、フォアグラウンドとバックグラウンドに対応している。
		- 省電力のためのガイドラインがある。適切なスキャン時間程度だけど。
		- 常に相手デバイスとセットになった開発になるため、ステップバイステップと、雑談ができる開発体制が役立つ。
		- 通信は相手が必要。スマートホンのプラットホームの上に成り立つ。

ペリフェラルの開発
	目的に適した実装提案
		用途と仕様			(縦軸にハードウェア、横軸にソフトウェア。電池交換の有無、設置方法、運用方法、廃棄方法。ハード側からの提案になるもの。)
		試作なのか製造なのか
		開発分担の組み方と流れ	(SDKはどこが作る、ハードODMだと、あとで改良時に金額と時間。資源を持つことは、お金がかかるが、自由度と何より本音が聞けること。判断するには、情報が必要だから。)
		認証制度			(電波法, Bluetooth, 試作時の注意、設計段階で反映、各国対応、説明書)
	半導体の選択
		目的に合わせた選択		(全体バランス。大きさ、消費電力、目的。モジュール、価格。極端な低消費電力なのか。)
		ワンチップか2チップか	(構成。通信だけ、既存機器+通信、処理+通信、1チップ)
		センサーを選ぶ			(バス、動作電流、スイッチ兼用とかなら特定の機能。IOの数、エキスパンダ。)
		電池の選択と電源回路		(LiPo, NiH, コイン型、USB)
		半導体会社ごとの特色		(TI, Cypress, Nordic, CSR, Dialog。OS、開発環境、ユーザフォーラムの充実度、買収の過程で)
	電気と機構設計
		モジュール実装		(アンテナの設計、制約、性能の検証)
		電気回路設計		(EMC, EMI)
		製造組み立て、認証制度	(製造管理)
	ソフトウェア開発
		開発フロー			(会社の区切りかたで振る舞いが異なること。流れは、ES、本番、端子は、担当は? 節目は)
		ソフトウェア開発環境		(IDE、RTOS、ライブラリ、ユーザフォーラム)
		アプリケーション開発との連携	(仕様書ベース、提供タイミング、トラブル発生時の切り分け方、連絡の取り方)
		ユーザ体験の確認と継続的開発	(販売前、販売後。そしてOTAなど。動くことではなくて、おつきあいの商売だから。)
	まとめ
		- 立場が異なれば、考え方や見え方が異なる。最初から予想できるものは、予想した組み方にする。
		- 外に依頼して何かを作るとなると、ちょっとした実験への負荷が、お互いに大きい。一方は時間、一方はお金。
		- 専門家の選択と素人だから理解できないは違う。無数の可能性から、適切な組み合わせを選ぶのは専門家に任せればいい。その選択内容と理由は、十分に説明を受けて、勉強すればいい。

BLE技術の実際
	ホストとコントローラ
		コントローラとの通信	(USBでのドングルとの通信。ボードでBT5のと、シリアル通信)
		HCIとその内容
	アドバタイジング
		アドバタイジングデータとレスポンスデータの設定
		アドバタイジングの開始と停止
		拡張アドバタイジング
	通信レイヤを実装する
		L2CAP
		ATT
		GATTS
		GATTC
	通信の実際
		コネクションインターバルとその変更
		サービスを実装して読み出されてみる
		ペアリング/ボンディングを実装する
		ANCSにアクセスしてみる
		iPhoneが持つGATTSのキャッシュ、サービスチェンジ。
		実効ビットレートを伸ばしてみる	(コネクションインターバル、パケット拡張、2M PHY, L2CAP Ch.)
		通信距離を伸ばしてみる (CODED PHY)

おわりに
	BLEはとても身近な無線通信技術。
	アプリケーションとハードウェアを組み合わせて開発ができる、
	目視できる範囲での技術として。
	スマホのエコシステムで増幅も可能。
	チームで、事業でとなると、技術の境界と組織の境界と知識の境界とが混じってしまう。その境界を溶かす役割ができれば、この本の目的達成です。


メモ:サービス視点、90%繋がっていればいい感じの
Bleutooth Low Energy とは何か

  理想な場面
    フィットネス的な。
    家に入れば、電気がON。音声通話で、ポケットの中のスマホからSiri。
    近くに来れば自動反応。
    自動車や部屋のレンタル。アプリを見て近くに来れが使える、ドアが開く。意外とつながらない繋がる。
  使い手から作り手に視点を変えて、実現するには
    無線は高価、オーディオやキーボードみたいにそれぞれのハードウェア端子というわけには
    無線は構成要素がいろいろ、半導体、スタック、アプリケーション、長い間のHW、採用と普及

  所有権や主語を組み替えることで
    ハードウェアとしてではなくて、もっとぼんやりとひろいもの。
    無線?ラジコン。アプリ、支払い、課金。10分間使える。ラジコンそのものだけど、そうじゃない。
    フィットネス、健康のデータ、データの蓄積。専門化による分析。万歩計とは意味が違ってくる。
    自分の自動車、誰かの自動車。レンタル、シェアリング。あるいは、レンタル会社のもの?所有と利用の権利を扱う。物理的な鍵。
    課金やサービス、認証、ネットワーク、事業経営のなかで。既存のハード
    いまはスマホ、ネットワークサービス、その先に。BLEはその世界でもIPの世界でも。
  技術背景は無線(が必須)
    物理的な世界とネットやアプリの世界。橋渡し。その中の1つ。
    BLEは、Bluetooth4.0から統合された超低消費電力な技術。繋いで使うのとは、だいぶイメージの違う無線。
    BTだけどいままでのBTとはちょっと違うこの技術、違いを見ていこう。
  どんな技術要素として必要性がある?
    他の無線、WiFi、携帯、クラシックBT。用途、ハード向け、通信向け、アクセスポイントあれこれ。
    カバーできない部分に向けた新技術、それがBLE。超低消費電力そしてウエアラブル向け。
    Bluetooth、結構使っていますよね。どんな場面?
    無線通信は通信相手がいて初めて成り立つ。ハードウェア向けの通信仕様。通信相手ありき。
    心拍計とか出てきている。進化してきているけど、その進化の方向ではカバーできない。
    抑えておくべきは、繋がり続けていることが年単位。1ビットあたりの電力の魔法ではない。
    利用場面似あわせて最適化することで、そうなっている。だからクラシックBTとは違って、ぽつぽつデータを送る用途。
    電池の選択、通信パラメータ、ファームウェアの工夫などで、桁違いにいろいろ違ってくるけど。
    多種多様、低消費電力、低コスト。
    意外とつながらない繋がる。
  規格の流れ
    Wibreeなど、いろいろあって2010年に規格として統合された。認証は大事。相互接続。
    中核技術、通信とデータ表現、そして運用。
    いままでのBTとは電波をやり取りする方式からして違う。なのでロゴを分けた。
    むちゃくちゃわかりにくいけど。SMART READYとSMART。
  色んな物の登場、普及
    これまでのBTと違う、多種多様なハードウェアを許す。用途が決められていてはだめ。でもいいままでは?用途を決めていた。
    セキュリティ、プライバシー、守りつつ、利用場面。
    スマートホン、iPhone。アプリ側も開放した。MFiなしに。一気に。スマホ連携ハード。アプリ。
    ハードウェアの作りやすさ。電波法、モジュール。サービス開始まで。試行錯誤。
  使われ方、アプセサリ
    例えば、フィットネス分野、アプリを通じてサービス、アプセサリ。
    アプリとアクセサリの造語。歩数、記録してスマホに入力する一手間が不要。
    写真がそうであるように、データは自動的に。そして画面。ソーシャル、口コミ。
    事業としてFitbitなど。上場。300円のハードウェア。
    つながり方の面白さ。ヘッドホン、つなぐ、音楽が流れる、切る。
    最初に設定しておけば、あとはなんとなく。
  使われ方、プラットホーム的な
    HomeKit、iBeacon。
    マイクロロケーション。ビーコンはブロードキャスト、常に検出。起動すべきアプリが自動起動。
    家電。ハードはMFi。Siriで操作できる。ハードウェア的にはAppleと秘密保持。アプリは作れる。
    その他、キーボードサポート、ヘルスケアアプリがいろいろ集約。
    楽器の仕様。ANCSの仕様。ロイヤリティフリーで公開。とてもオープンな。
  その先
    インターネット系、IoT系、構成、エッジ、ルータ、クラウド、
    BLEの未来。モバイルの次、スマートホンだけではなく、インターネットへ。同時に使える。
    音声とか、操作系?
    家電。メッシュネットワーク。パケットを中継する、ルーティング、ネットワークの能力。
    BLEの規格の範囲ではなくて、IPの技術。IPv6、6LowPAN、CoAP、MQTT。
    提供するのは、そのベースの部分。電波が届く範囲で、電波をやり取りする部分。

も少し詳しく、BLEの使い方とその概要。
  背景
    これまでのBTとずいぶんと使われ方が違うもの。さっきの冒頭の場面。
    概要理解でいいのだけど、なんのための技術か、使うための技術。その視点で。作るとなるともう少し詳しい技術なもの。細かいところで。
  BLEを成り立たせているもの
    全体像を見てきた。要素として、なんとなく繋がる、発見とかブロードキャスト、電池やコストの実施面、アプリ。
    物理的なもの、そもそも必要を満たすか。売れてなんぼなところ、使ってくれる人の母数。意外とつながらない繋がる。
    レイヤーをなしている。部分を見てもしょうがないが、全体から見て部分がはまっていないとしょうがない。
    スマホのアプリと繋がる部分に集中してみてみましょう。サービスは次の賞で。
    - 無線通信、無線で通信する部分、それを支える規格や認証制度。
    - サービスを支える、エッジデバイス。アプリ。スマホ。
    - 素早い、小規模な可能性の先に。
    - プラットホーム的な。楽器、ANCS、HomeKit...
  規格の流れ
    SMART SMART READY。
    4.0が出てから、4.1そして4.2。大きな変更というよりかは、暫定的な進歩。
    L2CAPチャンネル、セキュリティモデルなど。必要に応じて進歩している感じ。
    規格の要素を入れて、後でそれがどう生きるのかを。
  無線通信のこと
    用語:トポロジー、認証と認可。セキュリティとプライバシー。
    無線通信、相手がいる話。通信規格はベース。
    つたわること、つながること、セキュリティ(認証、認可)。これらは独立。その中で使えるもの、今まで出来なかった範囲。
    特徴は超低消費電力と、その上で情報を表現したりやり取りするGATTとプロファイルの仕組み。
    求められるのは、セキュリティモデルとか。
    レイヤーの話。
      ちょっと難しいけど。役割に分割することで、その下の層が何かを気にしなくてもいい。
      実際には、超低消費電力にしようとすると、その上の層も、それなりになっていないといけない。なので総合なんだけど。規格は綺麗さ。
      なので、クラシックBTでも、GATTは使えたりする。
    電波の通信の話。
      超低消費電力の秘密は、無駄に電波を出さないこと。極限まで絞る。だから時間同期する。
      2.4GHz帯は国際的なISM。案ライセンス。他の方式や電子レンジ、色んな物が使っている。届く距離。なので相互に干渉する。
      結構大事。920MHzとかある。国ごとのばらばらさ。あと同じ電力でももっと距離。だから事前にキャリアセンス。
      BLEは、送って受信できなければ諦める、割り切り。キャリアセンスもしないから。
      電波の届き方は、繋がる範囲、エリア検出だと物理的なもの。
    発見と接続とトポロジーと役割分担
      星形。最初はどこにいるかわからない、発見しないといけない。意外とつながらない繋がる。
      役割を分ける。役割の名前。ブロードキャストとスキャナ、マスターとスレーブ。
      無線の役割と、その上のデータをやり取りする部分と。セントラルとペリフェラル。
      なので、アプリから発見とか、消費電力があるので、常には動かない。適切なタイミングで。
    トポロジー
      役割が2つあるから、トポロジはスター型。でもペリフェラルはお互いに無関係。数も無制限。
      トポロジーがもつ意味。リビングのエアコン。同時に利用、いろんなデバイス?
      4.0では同時には1つ。4.1で複数同時がOK。自転車のセンサー、エアコン的な。メッシュ的な。
      利用場面、同時利用とかを決めちゃう。4.1からはかなり自由に。
    パケットのやり取りと消費電力
      レイテンシとスループット。
      マスターが常に出す、スレーブがそれに答える。コネクションインターバルごとに。つまりやり取りするデータは個々の部分。
      インターバルを短く、その後長くとか調整。データはあるだけやり取りできるけど、メモリの量。ケースバイケースすぎる。
      電池を気にする場合と、気にしない場合。使った分だけ使えればいい柔軟さ。ファーム次第。スマホ側ではなくて。
    セキュリティ
      通信それ自体。暗号化、認証、認可。パケット単位。規格だからいろいろできる。
      パケットのやり取り、なのでパケットのアドレス番号。プライバシー、追跡。ランダム化。
      ペアリングとボンディング。暗号の鍵を交換。共通鍵そして4.1で公開鍵暗号方式。
      所有、利用、確認。鍵の入力、OKボタンを押すだけ、PINコード、NFCみたいな。利用場面様々なので、オプションが多いが。
      アプリだと、スマホの管理画面にでてくるのは、ボンディングがあるものだけ。
    GATTとプロファイル
      多種多様、混在。スマホアプリ、カスタムプロファイル。振る舞いと機能。分離。データベースという考え方。
      サービスという単位+キャラクタリスティクス。ハードウェアの機能そのもの。
      プロファイル。サービスを使ってどういう振る舞いをさせるか。
      例えば、置き忘れタグとか。ハードを共通仕様にするのはBT SIGに提案して。
      カスタムプロファイル、カスタムなサービスを追加してとか、認証の範囲でできる。ここが大きい。
    認証制度
      相互接続のため、互換性。電波を出すので、公共の資源。製品とした時にはまた別に、電磁放射、コンセントに繋ぐならとか。
      BT SIGの認証と各国の電波法。あと電波を出すものだと、例えば日本だとVCCIとか自主規制。
      費用とコスト。部品だけ買って自分で設計、認証。モジュール会社のものは認証の価格が上乗せ。
      モジュールというもの。無線回路+認証。物理的な特性、電波の周波数の安定度や質。なので専門の認証のところ。
      相互接続、レイヤごとに。モジュールの認証を引き継ぐ。プロファイルで1つの製品。ただしカスタムではなくて。
      プロファイルの認証。自己申告制度。カスタムは自分でやればOK。費用は。
      なので、特殊なものでないかぎりはモジュールを使う。5ドル位。相当な数が出るものでも、モジュールを使っている。スマホ。
  プラットホーム、iPhone視点からみた
    通信相手としての存在。クラシックBTとBLEの違いMFiがあるかどうか。アプリが解放。アプセサリ。
    iPhone自体も、iOS6からスタート、iOS7、iOS8、iOS9それぞれで導入。
    iOSがやってくれないと手が出せない役割を果たしているような。
    CoreBluetooth。サービスの単位で。どのアプリからでもアクセス可能。
    アプリ、ハード、サービス。
    HomeKit、iBeacon、楽器、ANCS。それぞれの意味。例えばANCSは、iOSが持っている通知。Androidではインテントなどで自由だけど。
    楽器だと、コネクションインターバルが特別扱い。リアルタイム性。
  その先の、IP系の
    これから。設置型? 半導体各社、売れればOK。いろいろキット? 運用は? IPv6、WiFiルータ。IPv4ブリッジ? 携帯はIPv6かもだけど。
    直通とかそういうのは問題ではなくて。管理的なもの。Zigbeeとか独自システム。つーつーのトンネル? 物理が違うから必ずルータが入る。
    ご家庭なら? インターネットに繋がる、それとも閉じる? 認証とかまわり。HomeKit、ハード、管理。通信、貯める?

作り手側からのあれこれ
  背景
    最初の場面、勝手に作れるものではないし、ハードが絡む。アプリだけでもない。
    立場が重要、サービス発想、ハードウェア発想、アプリ発想。いろいろ。資本、技能者、強み、持っているものと持っていないものと。
    サービスのために必要、ハードウェアで参入、スマホやアプリだけでは成り立たない。いろいろ
    スマホ、母数が大きい。個人だけじゃない、業務利用も。需要、いろいろ。
    小規模からスタート可能。ハードウェアの壁。逆に大手は手が出しにくい、規模に合わせて生長すればよい。
    そもそもつながらなくても動くかとか。
    - ボトムアップ的な,ハードウェアからの
    - 事業的な、会社的な
    - 実務的な、サービス的な
  考えつくパターン
    所有者、利用者を考える。どんな体験か。そこにどんなハードウェアがあるのか。それらの購買や課金タイプを組み合わせて。
    いままでと違う点を考える。ものと一体になっていた、所有権がネットにより分離できたら。パケット制御の理論でリースを制御。
    要素、ハード、アプリ、サービス。
  発想の組み換えと最初の見るべきポイント
    ネットワークの図を見ると、階層。ネットワークには物理的なもの時間なもの、リアル世界とは違うもの。
    所有権や利用権利の切り離し、混合、併用可能。レイヤが上がれば、履歴から信頼度、実際のビジネス例。個人融資。
    時間がテーマでは。素早く動けば動くほど、売上と利益が上がる。消耗品であればサイクル設計。
  発想、事業的な、データの流れからの発想
    蓄積する、取得する。個人情報があることで、合理的なサービスであれば、喜んで。堅固な守ることが、ブランドに。国民の概念。
    データから引き出せる価値。身に付ける習慣のAND。生体データの分布。その価値。
    物理量と実際に運用可能なセンサー。費用、消費電力、ニーズ的な。だいたい大手資本の後追い。センサー単体で事業になる。
    入力と作用。
  過程
    ボトムアップ的な、プロトタイピングとその方法
      動くもので試す。細かいが、肝心なところ。電池交換必要とか、防水いるなとか。なので体験、完成品を作るわけではなくて。
      センサータグとかプロトタイピング用のキットあれこれ。半導体会社からも出てきている。少量を作って実験ルーム的な。
    ボトムアップ的な、体験を作る
      ダンボールや紙、あるいは演劇的に。考え方、概念を決めること、価値は何かとか。
      動くものを作るまでの時間、人を雇うか外注するか、納得感、売れるかどうか。
  デプロイ、事業的な、製造、売るって、捨てられるまでを考える
    スタート時点、売掛金と買掛金。そのタイミング、流通とかサポート、それぞれ用意すべきタイミング、費用。
    課金タイミング。購入、月額、サービス契約。
    デザイン。個人であれば。フィットネス。新モデル、新機能。5000円。
    規模の生長。口コミ効果
    サイクル。捨てられて、まだ買ってもらうのか。
  過程、実務での、実務的な、カスタムなハードウェアの作り方
    半導体会社。開発環境。実験なのか製造なのか。認証周り。工場が対応しているか。
    専門家に丸投げしない。iFixitで学ぶ。部品のサイト、フィジカル・コンピューティング。いろんなコンテンスト。知的財産。
    実務的な、チームを作る、動かす
      何を作るかを決める。短いタイミングで回す。負荷の集中など、サポート。
      ハードとソフト、接続部分。会社をまたぐと。設計は製造前提と変更前提でまるで違う。内部に抱える必要もないかも。
      通信プロトコル、解析、SDKまで。

無線通信規格の詳細
  背景
    考えるための知識。表現。
  各層の概要と全体からの役割
    階層構造、物理層、リンク層、L2CAP、ATT、GATT,SM、GAP。
    層ごと、分離。でも全体統合で、超低消費電力。連携。無視するのではなくて。
    SMは使い勝手に影響する。レイテンシとスループット。初回接続時は早く、そしておさえるとか。パラメータ。
  物理層層の技術
    電波で通信。2.4GHz。変調。信号の伝わり方、距離は送信電力と受信側感度、反射、干渉。
    物理層の1Mbpsというのはここの話。
    周波数を分割、ホップして。アダプティブ。使えない部分は使わない。周りにある機材。時間と周波数で。
  リンク層の技術
    隣り合うところと繋がる。基本。パケットの長さ。MACアドレス。パブリック、ランダム。
    ブロードキャスト。リンクしたら、タイミングを合わせる。結構短い。発振回路で0/1判定。Syncから。
  HCIとL2CAP
    リンク、隣り合う。マイクロ秒。秒単位。ハードとソフトの境界。HCI。
    L2CAP、論理的に。いくつか組み合わせ、クオリティ。ボタン操作と音声とか。BLEでの意味?
    微妙に無駄。でも、L2CAPチャンネル。GATTではなくて、IP系の技術のベースとして。リンク。
  SM
    セキュリティ。モデルとレベル。前提として、ペリフェラル。IOがいろいろ。認証モデル。
    ペアリングとボンディング。鍵の交換、保存。通信でどうやっているかといえば。
  ATTとGATT
    もともと1つの部分。2つに分けた。サービスとキャラクタリスティクス。データベース。
    その詳細。CCCD。ボンディングで保存。
  プロファイル
    振る舞い。機能部分。これは規格とは別に。公開されているプロファイル群。いろいろ。
  これから
    高速通信、パケット長が伸びるIP系でも。同じ消費電力で2倍送れる感じ。
    音声系。メッシュ系、高速。

iOSアプリケーション開発
  概要
    冒頭の場面、アプリはサービスと人、物をつなげる、モバイル。人はネットから見ると透明だし。サービス契約のひも付け、鍵。
    内部構成。iOSメインとBLEのモジュール。アプリとデーモン。
    iOS側、HCIとか音楽とか一般的なもの、カスタムプロファイル。消費電力との兼ね合い。アプリの状態。
    iOSとOS X。名前空間が同じ。
  CoreBluetoothのセントラル
    APIがどんなものに対応しているのか。バックグラウンド、振る舞い。
    発見と接続。
    サービスとキャラクタリスティクス。バイト数のあれこれ。
    接続の復帰方法、ペリフェラルの識別。
    ノウハウ的な。キャッシュ。インターバルはいじれない。ボンディング、サービスチェンジ。パケット見たほうが?
  CoreBluetoothのペリフェラル
    APIがどんなものに対応しているのか。
    サービスの構築、公開。実際に出ている電波はなにか。
    接続、サービス、キャラクタリスティクス、通信。
  BLEを使うその他
    iBeacon。常時検出。位置。近接。
    HomeKit。デバッグはネット共有すると便利。
    音楽、CoreMIDI。
  デバッグ方法
    実機のみ。かつてはシミュレータでもいけたけど。いまは、iOSのデバッグログを取得する。
    パケットを生で見る。対象がハードウェア。振る舞い。電源On/Off。こうなる集。
    机を並べて動作。SDKを渡すなど。責任の分界点。ライブラリを使う。
  はまりどころ
    つながらない、アクセス出来ない。機能しない。

カスタムハードウェア
  概要
    冒頭の場面を作るうえで。ハードウェア。
    カスタムな開発。用途。周辺機器で電池がシビア。集約してネットに中継する。
    プロトタイピングならiOSデバイスとか。Androidを利用するとかある。
  半導体そしてモジュール
    タイプとして、HCI(GATTスタック外部)、GATT使えるインタフェース、USB/SPI/シリアル。
    選択肢、既存のがある、イチから作る。電力気にする、気にしない。シリアルじゃなくて。
    半導体の会社それぞれ。組み込み。LinuxならHCI。開発言語、ライブラリの違い。
    Cortex-Mx + 無線でスタック / RTOSで隠蔽 / HCIでライブラリ。
    ユーザアプリが中に入るか。消費電力厳しい、販売価格、汎用性。開発者。リスト化。環境。
    センタータグ、全体システムとして。スマホ、ルータ。ペアリング、ボンディング。数。管理。
  特に組み込みで、特徴それぞれ
    ユーザフォーラム、作例。設定ライブラリ。認証とユーザアプリの兼ね合い。
    SiLab., Broadcom、Cypress、TI、Nordic。mbed。センサータグ、ファーム。ウエアラブルコード。
    加速度センサーとか、周辺。価格。精度、必要。歩数解析。DSP内部の。消費電力。ワンチップ部分。
    音声、L2CAP Channnel。メッシュ、独自なプロプライエタリ。ANT+。Zigbee。ラインナップ。
  実際の開発
    仕様のやり取り、サービスに合うのか。文化の違う人達。節目節目。がっつりやる段階か、小出しに出せるものか。
      基板作って実装、時間かかる、小規模でディスクリート。モジュールを使って、乾電池、小型化はその先で。
    見積もり、プロトでギチギチにやる必要はない。でも可能性はちゃんと手元で計算しておく。夢物語ではなく。
    オープンなので、Nordicを例に。BLEの規格を作っているところでもあるし。
    環境、費用。IAR, MDK, gcc。Segger。
    開発ボード。SDK。サンプル一覧。Packs。選択。組み込んでいく。メモリ制約。
  通信プロトコルに基づく、作り方あれこれ
    シリアル通信と何が違うのか。ストーリ。既存を。
    ノーティフィケーションとインディケーション。標準のプロファイル。
    ペアリングとボンディングの捉え方。プロトでとりあえず、後に。体験として。つながらないのはどんな場合か。
    ATT MTU。インターバル。ボンディング。暗号化。サービスの定義。
    ファームウェアの更新。それぞれ独自に。
    BLEの範囲を超えて
      独自通信方式、IP系、音声とかコーデック系とか。提案範囲。メッシュ的な。生来の展開的な。

実際の通信例
  概要
    実際に通信。電波を出す。パケットを扱う。
  USBのドングルを接続する
    OSに取られない設定。SwiftからUSBで繋ぐ部分。
  パケットでやり取りする
    HCIの基本部分。
    パケットスニフ、実際のパケット例。
  アドバタイジング、スキャン
  ATT/GATTでやり取りする
    パケット構造。
    サービス検索とキャッシュ。相手の振る舞いを見てみる。
    ハンドラ、CCCD。
    スループットとレイテンシの違いを見てみる。
  ペアリングとボンディング
    ペアリングとボンディング。
    再接続してみる。
    鍵を忘れてみる。相手が鍵を忘れた場合を見てみる。

付録: アプリ開発指針
付録: UUIDとは




== BTの通信規格とその発展
    BTからBLE、4.0とその後の展開。カバーできない部分。そして5.1へ。must と shall。4.2相当でも5.0。
    特徴、超低消費電力、安価に、豊かなデータ表現。
        消費電力、繋がり続けることが、低消費電力。データの最大速度と、積分清田消費電力。    
        プロファイル、カスタムが可能。サービスとプロファイル。(昨日と振る舞いの区別) 
    通信の流れは、発見と探索、読み書き変更通知、通信の開始と終了。
    トポロジ、スター型。1対1。同時接続、複数の役割が可能。
        発見は簡素化。読み書きは、いわばデータベース。    
    困った場面になりがちなのは
        休日のファミレス。ブロードキャストの洪水。


    エアコンの例を取り上げて、機能と振る舞い、拡張。

== スマホの構成的に
    モジュールが使われる。
    BT4行こう、ハードウェア、通信用の半導体(ファーム)、デーモンプロセス。
    ペアリングとボンディングの管理。MFiでの特殊な方法。(鍵の交換、初期設定)
    高度なセキュリティ、GATTS、他のアプリも読み書きできる。
    ファームウェアの更新。

== エコシステム的にあ話
    スマートホンへの採用、その採用の方法。(通信、サービス、プロファイル、アプリ開発環境、構造)
    ペアリングとボンディング。    
    標準化されたプロファイル。キーボード、マウス。
        オーディオ系の動き。今はドライバがないので。
    業界標準的な周辺機器。MIDI。
    近接の検出。    
    家電のむれ? メッシュネットワーク、HomeKit、その他。(共存ができるよと)
    カスタムプロファイル。アプセサリ。(iOSのソフトウェアの仕組み)
== 環境が整っている
いつから使えるのか。どこで使えるのか。
    2010年、規格。世界初。スマホとその展開。規格の展開。
    ソフトウェアの構造、エコシステムとして。アプセサリ、GATTベース。
    みじかな例。セキュリティ、プライバシー(追跡、他人が使っちゃったりしない、通信)
    キーボード、ペンシル。自分の端末とだけ繋がる、目に見えない電線として。
    フィットネス。カスタムプロファイル。アプリとの連携、アプセサリ。気がついたら同期。
    ビーコン。お互いが近くにいることを検出する。


== 使われ方もう少し詳しく(アイディアの例題として)
    既存の製品から学ぶ
        標準プロファイル。キーボード、マウス、心拍センサー(データ保存は定義がない)
        カスタムプロファイル。フィットネス、健康(心臓)、
        ビーコン
    分解した画像で攻勢を学ぶ。商社に聞いたほうがいいかもだけど。
    プロトタイピングで学ぶ
        要素と掛け算する何か。要素を知れば良いけど。
        誰が、どこで、何を。自動化なのか、アプリ画面を見るのか。
        購入して、使い、更新、使用をやめる、破棄する。口コミの広がり。サービスの展開。


=== 規格の変遷、プラットホーム、利用場面への適用。
クラシック, 4.0, 4.1, 4.2, 5.0...
BLEの登場、最初の構造。特にスマホの。そこから、パケットのながさ、認証制度を高く。特にアプリに解放されたのが大きい。

プラットホームの変遷
クラシックの時代、ドライバ+アプリ。
スマホの時代。GATT+アプリ。サーバ、クライアント
他のアプリも見えちゃう。

高速化、長距離か、方向がわかる。家電とか、アセット管理、ビーコンの利用、
コアの規格、それ以外で、メッシュネットワーク、GATT基盤プロファイル、使い方場面の拡張。
同時に満たすことは無理。


=== 利用場面へとつなげる取り組み
エコスシステム、思いつく人、作り人、製造する人、届ける人。この構成要素、最初にやった立場に似てるね。
分岐1: スマホが解放していないとダメなの、システム的なの。
1つは、勝手にやれ。アプセサリ。アプリに解放されたことで。
基盤として。ANCS。
基盤として、NDA必要なもの。ビーコン。これはOSが対応しないと利用できない。位置情報とか、プライベート情報、サンドボックス。HomeKit。
自社活用。プラットホームの活用。Apple Watchなど。クラシックと切り替わり、最適化。AirDropで近接のユーザがいること。Macが位置を覚える、周辺の。
ファミレスでお昼に入ると、デバイスとの接続ができなくて困った。




色々な無線通信技術、その特徴と利点。

知るべきこと(認証制度)

全体の流れ(目標別)

要素の組み立て
ウェアラブルを例題に。
単なるリモコン? 単なるセンサー?

試作環境。

開発環境。

チームの組み方。



#@# プロファイルは誰が作る。みんな? ブレインストーミング。製品開発、アイディア。新規。すでにある。
#@# アイディアから、試作そして製品開発へ。
#@# プロトタイピングまで開発者がいないことはよくある。そこに開発者として参加するならその役割は
#@# 必ずしも作ることとは限らない。
#@# 技術の振る舞いと、実際の予想の不一致は、技術の方に部があるから、プロトタイピングは重要。
#@# 事業的の視点
#@# 技術のちょっとした聞き間違いが、大変なことになる。作れるものしか作れないということ。
#@# 製品化では開発者を集める。

目的: 
社内で新規事業、起業。資本の違い、環境の違い。一般向け、ビジネス向け、社内で閉じて。
事業計画、その中で、BLEという要素。周辺機器販売、スマートホンと連携することでユニークさ。
サービスのためのハードウェア。データを集めることが主目的で。
対価を得る何か、サービスと金銭との流れ、シェアの確保、事業を強く。いろんな目的だけど、基本は利益。
WiFiの初期設定みたいなちょっとしたものではなくて、1つのそれがお金の流れになる、組織の境目になる何か。
プロファイルはここで決まるよね。

時間軸、過程:
事業化の目的。それは立案者次第。
その中で、サービス、アプリ、スマートホンという普及した環境、
ヒトモノカネ情報
会社の機関設計、資本の組み方。
財務、法務、広報。
その上で初めて、開発者を集めて。設計製造、技適やら、在庫管理。会社間で、あれこれするかもしれない。


人材の集め方:
配布製造デプロイ次第: ハードウェアはいる? アプリはアプリストアで配布できる。独自のかたちあるもの系。一般に広く。
社内、そのものずばいがいたら楽。無線関係でノウハウがあるとか。電子回路、無線通信は知らないとか。何かしらの専門はあるだろう。
社外、フリー的な。チーム的な。とても難しい。プロトタイピングと専門の両立は、まずできないだろう。そんな柔軟な人材イルカ?
会社間。標準化されたプロファイルなら、OEM、ODM。

トラブル:
開発リソース。自分たちでもつ。特許。ライセンス。
社外、カスタム依頼、いつまでもできない。
試作はできるが、動かしたら。製品ではない。繋がらない、不安定。ANdroidではダメですとか、寝泊まりして。
#@# 製品化では開発者を集める。
#@# プロファイルを作るまでの流れ
動機: 事業そのものの中で、必要だから。別にBLEである必要はない。製品のちょっとした追加。プロファイル?
目的: 実装するものは決まっているけど。組織運用。最後に破棄されて初めて終わり。
過程: 
社内の人材、そのものズバリがいたらラッキー。いなければ? 専門家と話せる人材。
ハードウェア側とアプリケーション、サーバー側、3つになった場合? 仲良く。会社の境界線。
Bluetooth meshネットワーク仕様
