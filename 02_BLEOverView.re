=== Bluetooth low energy の規格概要

通信は一人では成り立ちません。必ず同じ手順でやりとりする相手がいなくては成り立ちません。そのお互いとお互いのやりとりの手順を提供するものが通信規格です。通信規格の多くは、規格適合の認証制度が運用されています。その認証制度があるから、異なる製造会社が出荷した製品間の無線通信が実現されます。

無線通信技術は、無線通信やパケット通信などの高度な技術をいくつも組み合わせて初めて実現できます。しかし、規格適合している無線通信モジュールや、ソフトウェア開発を容易にするiOSのフレームワークを使うならば、それらの技術の詳細を知らなくても開発ができます。

たしかに、目的がはっきりした開発であれば、提供される無線モジュールなどの利用手順に従うだけでよく、その内部にある技術詳細を知る必要はありません。

しかし、目的もはっきりしない実現可能性を自分で判断しなければならない場面であれば、その内部にある技術がどのような性質であり、どう活用できるのかを知る必要があります。

Bluetooth low energyの無線通信技術は、その最大の特徴である超低消費電力がどのように実現されているかは、知るだけでも単純にたのしいものですし、またその知識が多種多様の利用場面を考えだす基礎力にもなります。

ここでは、Bleutooth low energyという通信技術が、どのような性質をもっているのか、またどのような工夫や考え方で作られているのかを見ていきます。

==== 無線通信を会話に例えると

Bluetooth Smart機器が送受信している電波は人間の目や耳では捉えられません。しかし、それらの機器間の無線通信の様子は、人間が目を閉じて音声だけで周囲と会話している状態だと思えば、容易に想像ができます。人間は、外部からの情報のほとんどを視覚から得ています。ですから、目を閉じて聴覚だけの状況を想像することが重要です。

声と聴覚のそれぞれを使う使わないの組み合わせから、次の4つの使い方がでてきます:

1. 話さないし聞かない
2. 話すだけ
3. 聞くだけ
4. 話すし、聞く

話すだけでも、周囲に自分の存在を知らせることができます。聞くだけでも、周囲に誰がいるかを知ることができます。

Bluetooth low energyの通信は、周囲に自分の存在を知らせること、そして周囲に誰がいるかを知ることから始まります。お互いにお互いの存在を検出して初めて、3つめのお互いのやりとりを開始できます。

お互いに会話をするには、 相手に自分の声が聞こえること、そして相手の声が自分に聞こえることが必要です。

声の大きさは、電波の送信電力に相当します。大きな声をだすほど、より遠くまで伝わります。そして、耳の感度が高いほど、また周囲が静かなほど、遠いところで発せられたより小さな声が聞き取れます。耳の感度は電波のアンテナや半導体の性能に、周囲の静かさは電子レンジやWi-Fiなどの周囲にある電波を発信している機器に対応します。

通信が成り立つには、お互いの声がお互いに聞こえる必要があります。声は大きいけれども耳の感度が低いと、相手には声が届くけれども、相手の声が聞こえないかもしれません。また声が小さくても耳の感度が高ければ、その逆になります。いずれにしても、通信は成り立ちません。

お互いに会話をするには、さらに次の条件が必要です:

- 話すタイミングと聞くタイミングが合うこと
- 話している内容がお互いに理解できること

ここでは、自分が話している間は自分の声が邪魔になり、相手の声が聞こえないとしましょう。そうすると、お互いに話すタイミングと聞くタイミングをあわせなくてはいけません。また、日本語しかわからない人が英語を聞いても理解できないように、相手が話した内容を自分が理解できなければなりません。

この目を閉じた状態での会話の様子は、Bluetooth Smart機器どうしが通信する様子そのままです。これらの基本的なやりとりをまとめる仕様が、Bleutooth無線技術ではBluetoothコア仕様と呼ばれます。

声も電波も、周囲に広がるものなので、誰かがじっと耳をすましているかもしれません。またやりとりのタイミングに合わせて、誰か知らない人が電波を送信して不正に情報を読み出したり、書き込んだりしようとするかもしれません。ですから、この普段の会話の場面からは気づきにくいのですが、無線技術には、強固なセキュリティとプライバシーの保護が求められます。

それでは、この会話のたとえから、具体的な数字を交えて、Bluetooth low energyの技術の詳細を見てみます。

==== Bluetooth low energyが使う2.4GHzの電波

Bluetooth無線技術は、周波数が2.4GHzの電磁波を使います。Hz(ヘルツ)は周波数の単位で、1Hzは1秒あたり1回の振動です。G(ギガ)は、 $ 1 * 10^9 $ を表す接頭辞です。ですから1ギガは10億を意味します。2.4GHzは、1秒間に24億回振動するという意味です。

電波は公共の財産です。国が、利用目的ごとに周波数を割り当てて、事業者に免許を発行して管理運営しています。この2.4GHz帯という周波数帯は、水が強く吸収する周波数なので、電子レンジのように電波を無線通信以外の産業・科学・医療に高周波エネルギー源として利用するための周波数帯に割り当てられていました。

このように、もともと2.4GHz帯は通信に使われる周波数帯ではありませんでした。しかし、半導体技術が発達して2.4GHz帯の高周波が扱えるようになると、世界各国で共通して利用できる周波数帯として、通信に利用が割り当てられました。そして現在は、無線LANやBluetooth無線技術などの、いくつもの高度なデータ通信が利用する、世界各国で広く一般で通信に使われる周波数帯になりました。

電磁波が真空中を伝わる速さ、つまり光速は $ 3 * 10^8  メートル/秒 $ ですから、2.4GHzの電磁波の波長は12.5 センチメートルです。電波を送受信するアンテナの大きさは、ほぼ波長に比例します。波長がこれくらい小さいと、アンテナが小型機器に十分収まる大きさにでき携帯機器に都合がよい周波数帯です。

また高周波信号を処理するには高速の半導体素子が必要です。身の回りにあるパソコンや携帯機器のプロセッサーの動作クロックが2GHzに達しているように、現在の半導体技術は、2.4GHzの高周波信号を扱う半導体素子を安価に大量に製造できます。

電波は波の性質を持っています。お風呂で手でお湯を押すと波が伝わっていきますが、電波もこの波と同じように空間を伝わっていきます。波は、何かにぶつかると反射したり吸収されたりします。またお風呂で2つの波をぶつけると、水面にいろいろな強弱の高さが現れるように、干渉して強め合う領域と弱め合う領域が生じます。

Bluetooth無線規格は最低受信感度と、電波の送信電力の最大最小値を規格で規定しています。送信側と受信側がお互いに見える状態で、大地を含めて電波を反射したり吸収するものが周りに何もない状態で、送信電力を最大にした時の通信距離は50メートルくらいです。

Bluetooth low energyを、相対位置や近接の検出に利用する場面では、この受信信号の強弱が目に見えてきます。

受信側は、受信信号の強さだけからビーコンまでの距離を推定します。ですがビーコンの周囲には、壁や大地などの電波を反射したり吸収するものがあり、反射した電波が強め合ったり弱めあったりしている場所があったりして、ビーコンまでの距離と受信信号の強弱の関係は、単純なものではなくなります。

また電子レンジに使われるほど、水は2.4GHz帯の電波をよく吸収します。人体のほとんどは水ですから、ビーコンと受信側の間に人が出入りすると、受信信号強度は桁違いに変化することもあります。
受信信号強度に影響するものが建物などの周囲環境だけならば、ビーコン設置時に信号強度分布を計測しておいて補正することもできるかもしれません。しかし、人のような刻一刻と変化するものも影響をあたえます。

この電波の性質があるため、ビーコンとの距離の推定値は、メートル単位の値ではなく、とても近い、近い、遠いといった3段階の距離区分で与える使われ方をします。

==== 超低消費電力無線通信の技術

超低消費電力無線通信技術は、2.4GHzという高周波信号を扱う送受信回路をオンにする時間を極限まで小さくするための工夫の集まりです。

Bluetooth low energyのパケット通信を [#fig_low_energy_packet] に示します。図の横線は時間軸を示します。時間は左から右に流れていきます。グレーの四角は、送信回路が動いている期間を示します。網目の四角は、受信回路が動いている期間を示します。

高周波回路の消費電力は、直感的には外部に電波を創出する送信回路が大きいと思えるかもしれません。しかし実際の半導体回路では、むしろ受信回路のほうが送信時よりもすこし大きくなります。ですから、[#fig_low_energy_packet] の消費電力は、四角の横幅で示されるパケットの送受信時間で与えられます。

![ #fig_low_energy_packet Bluetooth low energyのパケットのやりとり](fig/ch01_fig040_packet.png)

Bluetooth low energyは、送信している電波の周波数をほんの少し高くしたり低くしたりして0と1のビット・データを送信します。そのビット・データのひとかたまりをパケットと呼びます。

無線通信では、他の無線機の信号に邪魔されたり受信信号強度が弱くて、ビットの0と1が間違えて受信されることはよくあります。ですから、パケットには、送信したいデータに加えて、そのデータが正しいかを確認できる検査用のデータが入っています。受信したパケットを検査して、受信データに誤りがあると分かったならば、そのパケットを再度送信してもらうことを繰り返すことで、誤りのないデータのやりとりができるのです。

機器の発見でのパケットのやりとりが、 [#fig_low_energy_packet] (a) です。機器情報を表すアドバタイジング・パケットと呼ばれるパケットを、アドバタイジング・インターバルという期間ごとに送信する役割を、アドバタイザと呼びます。アドバタイザを発見する役割をスキャナと呼びます。

Bluetooth low energyは、一方がより消費電力が小さくなるように非対称に設計されています。[#fig_low_energy_packet] (a) の四角の大きさをみると、いつ来るかわからないアドバタイジング・パケットを検出するスキャナのほうが、アドバタイザよりも消費電力が大きいとわかります。

[#fig_low_energy_packet] (a) は模式図なので、四角の大きさが実際の通信の送受信時間を表していないことに注意してください。Bluetooth low energyの1つのパケットは最大376マイクロ秒です。1マイクロ秒は100万分の1秒です。ですから、アドバタイジング・パケットの幅は最大366マイクロ秒です。その一方で、スキャンはアドバタイジング・インターバル程度の期間なので、数秒程度になることもあります。

通常は、消費電力の大きなスキャナの役割をiOSデバイスに、アドバタイザの役割を周辺機器に割り当てます。iOSデバイスは、充電式の大容量電池があるので、消費電力の大きな役割はiOSデバイスに担わせます。また、この役割の割り当てだと、ユーザはスキャナであるiOSデバイスから周辺機器を探すので、自然な利用場面になります。

アドバタイジング・インターバルは、スキャナが機器を発見するのにかかる時間になります。この時間が短いほど、発見が早くなりますが、アドバタイザの消費電力が増えます。消費電力と使いやすさの兼ね合いをどうするかは、周辺機器の設計によります。

Apple社はiOSデバイスと接続するBluetooth Smart機器の設計ガイドライン [^1110] を公開しています。ここでは、アドバタイジング・インターバルを、最初の30秒間は20ミリ秒に、30秒後からは150ミリ秒から1.3秒の範囲の値として、最初は発見しやすく、その後は消費電力を抑える設定を推奨しています。1ミリ秒は、1000分の1秒です。

[^1110]:[Bluetooth for Developers - APple Developer https://developer.apple.com/bluetooth/](https://developer.apple.com/bluetooth/)

機器を発見すると、接続処理を行いお互いにパケットをやりとりし続ける接続状態になります ([#fig_low_energy_packet] (b) )。パケットのやりとりを管理する役割をマスター、マスターに応答してパケットを返す役割をスレーブと呼びます。スキャナがマスターに、アドバタイザがスレーブに、役割を切り替えます。

マスターはコネクション・インターバルという期間ごとに、スレーブにパケットを送信します。マスターとスレーブは接続時にお互いの時計を同期しているので、スレーブはマスターがパケットを送信してくる時間だけ受信回路をオンにしてパケットを受信して、マスターにパケットを返します。

お互いにやりとりするデータがある限り、このパケットのやりとりが続きます。やりとりするデータがなくなれば、パケットのやりとりは終了して、次のコネクション・インターバルまで、マスターもスレーブも高周波回路をオフにしたままになります。これが超低消費電力の工夫です。設計ガイドライン [^1040]は、コネクション・インターバルを20ミリ秒から2秒の範囲を推奨しています。

==== Bluetooth low energyのピコネット

[#fig_piconet Bluetooth] に示すように、Bluetooth low energyの機器はパケットを使い情報をやりとりする、つまりネットワークを形作ります。図の丸で囲まれたアルファベットは、機器それぞれを示します。矢印は機器の接続を示し、矢印の向きはマスターからスレーブを示します。

![ #fig_piconet Bluetooth low energyのピコネット](fig/ch01_fig050_piconet.png)

無線通信技術には、ある機器が送信したパケットを別の機器が中継をして、機器を束ねた1つの大きなネットワークを作る技術を提供するものがあります。しかし、Bluetooth無線技術は、目の前にある機器と直接無線で接続する技術で、このようなパケットの中継機能はありません。そのため、Bluetooth無線技術が作るネットワークは、直接電波が届く範囲に限られた小さなネットワークになります。

ピコネットは、Bluetooth無線技術の造語で、イタリア語で小さいを意味するpiccoloからとられた、SI単位系で $ 10^-{12} $ を表す接頭辞ピコとネットワークをつないだ、この小さなネットワークを意味する言葉です。

[#fig_piconet Bluetooth] (a)は、スキャナとアドバタイザが作るピコネットです。アドバタイザの送信したパケットは、その周囲にある複数のスキャナに届きます。機器の発見やビーコンに使われます。

[#fig_piconet Bluetooth] (b)は、接続しているマスターとスレーブがつくるピコネットです。マスターDは、スレーブCとスレーブEの2つのスレーブにそれぞれ接続しています。スレーブCとスレーブCからはマスターDが見えるだけで、スレーブはお互いの存在を知ることはありません。

クラシックBluetoothでは、1つのマスターと同時に接続できるスレーブの数は7つまでです。Bluetooth low energyでは、およそ $ 2^{31} $ (約21億)です。ですから、マスターに同時接続できるスレーブの上限数は、規格ではなくハードウェアなどの制約で決まります。

Bluetooth 4.0 の Bluetooth low energy では、[#fig_piconet Bluetooth] (b)のような、1つのマスターに複数のスレーブが接続するネットワークだけが許されていました。

このネットワークはマウスやキーボードを接続するにはよいのですが、例えば家族で利用するリビングのエアコンでは、ある1台のiPhoneと接続すると他のiPadやiPhoneからは接続ができませんから、とても不便です。

そこで、Bluetooth4.1からは[#fig_piconet Bluetooth] (c)のように、マスターが同時にスレーブになること、またスレーブが同時にマスターになること、さらにはマスターおよびスレーブは同時にアドバタイザになることが許されました。さらに、スレーブは同時に複数のマスターと接続してもよくなりました。

==== スループットとレイテンシー

スループットとレイテンシーの2つの値は、通信の性能を表す重要な値です。スループットは1秒あたりに届けられるデータ量を、レイテンシーは今届けようとしたデータが実際に相手に届くまでにかかる時間です。レイテンシーは日本語で遅れ時間と言います。

原理的には、スループットはコネクション・インターバルによらないはずです。マスターとスレーブは、コネクション・インターバルごとに通信を開始して、やりとりすべきデータがあるかぎりパケットを交換し続けます ([#fig_low_energy_packet] (b) )。実際には、送信データを作る時間が必要になると、その時点でパケットのやりとりが終了して、次のコネクション・インターバルまで待つことになるので、スループットとコネクション・インターバルの関係は実装によります。

レイテンシーはコネクション・インターバル程度になります。例えばキーが押された情報を送信しようとすれば、それが実際に送信されるのは次のコネクション・インターバル以降です  ([#fig_low_energy_packet] (b) )。

コネクション・インターバルが短いほどレイテンシーは短くなりますが、パケットをやりとりする回数が増えますから無線通信の消費電力も増えます。求められるレイテンシーと消費電力の兼ね合いから、コネクション・インターバルを適切な値に設定します。

パソコンのキーボードは、人間が画面を見ながらキーをタイプするので、押された結果はすぐ画面に表示されなければなりません。画面表示更新レートが60 フレーム/秒であれば、1フレームの表示時間は 17 ミリ秒 です。Bluetooth Smart機器の設計ガイドライン [^1040] は、普通のBluetooth Smart機器はコネクション・インターバルに20ミリ秒以上を推奨していますが、キーボードなどの入力装置は 11.25 ミリ秒まで受け入れるとあります。

コネクション・インターバルをはじめとするコネクション・パラメータは、接続中に更新できます。待機状態では長いコネクション・インターバルにして電力を節約して、動作を開始したならばコネクション・インターバルを小さくして必要な機能を提供する機器が設計できます。

==== 無線通信の混信対策と共存の技術

Bluetooth無線技術が使う2.4GHz帯は、電子レンジや無線LANなど、いくつもの電磁波を利用する機器がひしめき合う周波数帯です。ですから、電子レンジからの漏洩電波が妨害となり通信ができなくなったり、他の無線通信機器の通信に影響を与えたりしないように、共存するための技術が必要です。

共存するための工夫の1つが、空中線電力の上限設定です。送信回路がアンテナに出力する電力の大きさを空中線電力または出力電力と呼びます。空中線はアンテナの日本語表記です。電波はアンテナから四方八方に広がっていきますから、混信したり妨害になったりしないように、空中線電力は国ごとの技術基準で上限が規定されています。

Bluetooth low energyの規格は、空中線電力を最大10ミリワットとしています。日本の技術認定基準では、Bluetooth が採用している周波数ホッピング方式は 3 ミリワット/MHz を上限としています。Bluetooth low energyの周波数帯域は1MHzなので、日本での空中線電力は 3 ミリワット (4 dBm) が上限になります。

接続したBluetooth Smart機器は、コネクション・インターバルごとに通信に使う周波数を切り替えていく、適応周波数ホッピング方式を採用しています。もしも他の機器が使っていたりして、ある周波数では通信ができなくても、次のコネクション・インターバルで切り替えた違う周波数であれば、通信ができるかもしれません。

Bluetooth low energyは、2.4 GHz から 2.4835 GHz の 83.5 MHz の周波数幅を2 MHz 幅の40のチャンネルに分割して、チャネルを切り替えて通信します。

この周波数帯とチャンネルの関係は、ピアノの鍵盤に例えることができます。ずらっと並んだ鍵盤が周波数帯を表します。左から右に、周波数が低い方(低音)から高い方(高音)に鍵盤が並んでいます。鍵盤は1つのチャンネルに相当します。鍵盤を押せば、特定の周波数の信号(音)が出力されます。

1つのチャンネルでの通信は、例えばドの鍵盤の音を、ほんの僅か音色を変化させてデジタル・データを送信しているようなものです。他の機器が隣接するチャンネル、この例でいえばドの鍵盤の両隣にあるシやレの音、で通信をしていても、ドのあたりの音だけを通してシやレの音は通さないフィルタリングする信号処理を使えば、目的の信号だけを取り出せます。

コネクション・インターバルごとに違うチャネルつまり周波数にホッピングしていくので、周波数ホッピング方式と呼ばれます。

また、すぐ近くに無線LANなどがあって、通信に使えないチャンネルが事前にわかる場合があります。Bluetooth Smart機器は、状況に応じて通信に使えないチャンネルを指定できます。周囲の状況に適応していくので、これを適応周波数ホッピング方式と呼びます。

<!-- データ表現 -->

=== Bluetooth low energy のデータ表現

Bluetooth low energyは、多種多様なものに向けた無線通信技術です。ですから、この規格は、今はまだない機器が新しく登場しても、それらが相互に接続して利用できる仕組みを提供しなければなりません。

クラシックBluetoothは、これまでの有線接続を無線接続で置き換えるための技術だと言えます。

クラシックBluetoothは、利用場面が規格で決められています。通信とデータ表現仕様を1つの組にして、利用場面ごとに適したものとなるように、決めています。例えば、同じオーディオ・データを送る機器でも、通話に使うヘッドセットには音声品質よりも小さい遅延時間が重要であり、音楽鑑賞に使うヘッドフォンでは、遅延時間よりも高品質な音が求められます。

Bluetooth low energyは、多種多様なもののための無線通信規格です。無線通信から、多種多様なものを見ると、それはデータの塊に見えます。そこで、Bluetooth low energyは、ものを表現するために、サービスとキャラクタリスで構成されるデータベースとそのデータ同期の仕組みを提供しています。

Bluetooth low energyの、このデータベースの仕組みは、スマートフォンのアプリケーション開発にも影響しています。

アプリケーションからクラシックBluetooth対応機器を見ると、音声データの入出力端子や、任意の通信データの入出力端子など、通信ソケットに見えます。ですが、アプリケーションから見たBluetooth low energy対応機器は、データベースに見えます。

この節では、この多様性を実現している要となる、Bluetooth low energyのデータ表現を見ていきます。

==== サービスとキャラクタリス

無線通信から"もの"をみると、それは情報の塊、つまりデータベースとして認識できます。スマートフォンのアプリケーションから、Bluetooth low energy で接続した機器をみると、サービスとキャラクタリスというデータの集合体に見えます。

Bluetooth low energy のサービスとキャラクタリスは、ものをデータベースとして表現する仕組みです。

サービスは、キャラクタリスの集合です。キャラクタリスは、値を格納するものを表します。キャラクタリスは、読み出し、書き出し、そして値の変更の接続先への通知の3つの属性が設定できます。キャラクタリスには最大TBD 512バイトまでのバイナリ・データを格納できます。

キャラクタリスの値は、外部センサー、内部状態、および制御目標のいずれか3つの意味をもちます。例えば、室内照明であれば、室内気温という外部センサーの値、コンプレッサーの動作状況やファンの回転数といった内部状態、および設定温度という制御目標があるでしょう。

サービスとキャラクタリスには、その種類を表す UUID という 128 ビットの識別子が設定れています。UUIDの値とその意味は事前に定義されているので、接続したスマートフォンのアプリケーションは、UUIDの値でそれがどのようなものなのかを判別できます。

iOSアプリケーション開発者ならば Objective-C でいう、クラスのインスタンスがサービスに、プロパティがキャラクタリスに対応していると理解できます。プロパティには、読み書き属性があります。またキー値監視( Key-Value Observing ) [^1130] でプロパティの値変化の通知が受け取れるのと同じく、キャラクタリスに監視登録をすれば、その値変化の通知を受け取れます。

[^1210]: [Introduction to Key-Value Observing Programming Guide]( https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html )

サービスとキャラクタリスの検索と取得、そしてキャラクタリスへの値の読み書きと値変化の通知取得の仕組みは、通信路の上にある アトリビュート・プロトコル(Attribute Protocol、ATT) と Generic Attribute Profile(ジェネリック アトリビュート プロファイル、GATT) の2つの層です。

Bluetooth low energy を搭載する周辺機器のファームウェア、つまり周辺機器に内蔵されているアプリケーションの開発は、この2つの層の上に実装します。つまり、データベースとして抽象化された層で開発します。これは、通信路に流れるバイナリ・データの流れを直接扱う通常よくある無線通信機器のアプリケーション開発と異なる点です。

==== もののデータベース表現

Bluetooth low energy は、ものを、これ以上分割できない最小の機能の集合として見ます。

機器は、その最小単位の機能に対応する種類のサービスの集合体となります。機器が同じ機能のハードウェアを複数持っていれば、その種類のサービスを複数持ちます。例えば、温度センサーは1つのサービスにできます。室内エアコンが、室外温度と室内温度それぞれの温度センサーをもっているなら、それぞれの温度センサーに対応する2つのサービスを持ちます。

もしも最小の機能ではなく、機器の見た目そのままを分割単位とするとどうなるのでしょうか。

例えば、赤外線リモコンがある照明機器の、Bluetooth low energy 搭載にした新製品を開発するとします。赤外線リモコンの受信回路を、Bluetooth low energyの無線回路で置き換えて、赤外線リモコンはスマートフォンのアプリケーションで提供するとします。

ちょうどリモコンを1つのサービスとみたてて、そこに赤外線リモコンのボタン1つ1つに対応するキャラクタリスを入れたとします。このやり方でも、1アプリケーションに1機種が対応するだけなら、うまくいきます。

しかし、2機種3機種と対応機種が増えていくと、新機種ごとに機器内部の受信回路とスマートフォンのアプリケーションとを開発しなくてはなりません。これでは、開発にかかる費用も時間も大きくなります。

ここで、機器の最小機能単位で設計すればどうなるでしょうか。

例えば、照明機器であれば、どの機種にも共通する基本機能、電源のオン・オフ、明るさ調整および色合い調整などを1つのサービスにしたとします。この設計であれば、開発した機器とスマートフォンのアプリケーションは、今後発売されるものも含めた全ての照明の基本機能に対応できます。

また、上位機種に、例えば映画鑑賞時の照明機能のような、それまでなかった新機能を追加したとします。これは、基本機能とは独立した機能なので、この心機能を1つのサービスとして追加します。こうすると、基本機能のソフトウェアのソースコードは、そのまま再利用して、追加したサービスに対応するソースコードのみを新規開発することで、上位機種に対応するアプリケーションが開発できます。

このように、お互いに独立した最小単位機能をサービスに対応させることで、ソースコードの再利用をはじめとした利点が生じます。

==== データベースとしてのものの表現

ものを Bluetooth low energy から見ると、それは最小の機能の集合を表すデータベースでしかありません。Bluetooth low energy は、最小の機能単位とその組み合わせで、多種多様なものを表します。

例えば、身の回りには多種多様の照明機器があります。天井や机そして床に設置されるシーリング・ライトやテーブル・ライトそしてフロア・スタンド、また外観デザインも1つ1つ異なります。人間には多種多様に見えますが、しかし、その機能はどれも照明機器です。ですから、Bluetooth low energy から見れば、いずれも照明機器の基本機能を表す1つのサービスでしかありません。

また、懐中電灯は電池を内蔵した照明機器です。これは電池残量などの基本機能をあらわすサービスと、照明基本機能のサービスの、2つのサービスの組み合わせで表現できます。このように照明機能もある機器でも、機能に対応するサービスの組み合わせとして表現ができます。

またサービスは、新しい機能が必要となった時に、従来のサービスはそのままに新しいサービスに拡張する仕組みがあります。これは、オブジェクト指向のクラス継承に相当します。

例えば、人を検出して自動点灯する照明機器が登場して、それを照明基本機能に追加したいとします。この場合は、従来のサービスに人体検出を表すキャラクタリスティクスを追加した新しいサービスを定義して対応できます。

新しいサービスの定義でできることは、従来サービスにキャラクタリスを追加することだけで、キャラクタリスを削除することはできません。また、すでにあるキャラクタリスの値の意味を変えることもできません。ですから、新しいサービスは、その追加されたキャラクタリスを無視すれば、従来サービスとして扱うことができます。

このように、Blueooth Low Energyの、ものを表現するデータベースは、多様性と将来の拡張性そして後方互換性を保てるようになっています。

多様性は、サービスの組み合わせの掛け算で実現できます。将来の拡張性は、サービスの拡張で対応できます。また新しいサービスはその元となったサービスとして扱えるので、その新しいサービスに対応していないアプリケーションでも従来機能を同じように利用し続けることができます。つまり、後方互換性が自動的に保たれます。

==== サービスとプロファイル

Bluetoothは、Bluetooth で機器と通信したときの振る舞いと、その使われ方の定義とをプロファイルと呼びます。プロファイルの定義のなかで、機器の機能を表すサービスも定義されます。

簡単にいえば、サービスの定義までが機器単体の機能を定義します。プロファイルは、スマートフォンのアプリケーションとその機器とが、お互いにどう振る舞うのかを定義します。プロファイルの定義は、Bluetoothの相互接続を確保するための仕組みです。

サービスが最小単位の機能を表していたように、プロファイルも最小単位の使い方を定義します。たいていの製品は、複数のプロファイルを持ちます。

鍵の置き忘れ防止に Bluetooth low energy がよく使われている、キー・フォブ (key fob) と呼ばれる鍵に取り付けるアクセサリを例に、kのプロファイルとサービスの組み合わせの実例を見てみます。

スマートフォンとキーホルダーとは、無線接続して使います。鍵もしくはスマートフォンのどちらかを置き忘れると、距離が離れて電波強度が下がるか通信が切断します。この時に警告を出力して、置き忘れを防止します。また、鍵もしくはスマートフォンのどちらかが見つからない時は、ボタンを押して接続先の機器から音を出させることができます。

このキーホルダーには、Proximity Profile (プロクシミティ・プロファイル) [^1140] と Find Me Profile (ファインド・ミー・プロファイル) [^1150] の2つのプロファイルが実装されます。

Proximity Profile は、ある一定距離離れた時にキーホルダーから警告を出力する振る舞いを定義します。 Find Me Profile は、ボタンが押された時に接続先から警告を出力させる振る舞いを定義します。つまり、製品の2つの機能がそれぞれプロファイルとして定義されているわけです。

[^1220]: [Proximity Profile (PXP), https://developer.bluetooth.org/TechnologyOverview/Pages/PXP.aspx](https://developer.bluetooth.org/TechnologyOverview/Pages/PXP.aspx)

[^1230]: [Find Me Profile (FMP), https://developer.bluetooth.org/TechnologyOverview/Pages/FMP.aspx](https://developer.bluetooth.org/TechnologyOverview/Pages/FMP.aspx)

プロファイルは、1つのサービスを共有して利用できます。例えば、さきほどの Proximity Profile と Find Me Profile は、いずれも Immediate Alert Servide (イミディエイト・アラート・サービス)  [^1160] を使います。

[^1240]: [Immediate Alert Service https://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u=org.bluetooth.service.immediate_alert.xml](https://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u=org.bluetooth.service.immediate_alert.xml)

イミディエイト・アラート・サービスは、警告音を出す機能です。Proximity Profile では、置き忘れの警告レベルの設定に使われます。Find Me Profile では、直ちに警告を出力するために使われます。2つのプロファイルが1つのサービスを共有しても、使い方に不都合を生じない問題ありません。

==== カスタム・プロファイルとプロファイルの標準化

Bluetooth low energy は、自由にプロファイルを設定できます。これをカスタム・プロファイルと呼びます。カスタム・プロファイルに必要なサービスやキャラクタリスも自由に設定ができます。

サービスやキャラクタリスは、UUIDという識別子で識別します。通常は、識別子は、違う人が同じ識別子を違う人が違う意味で重複して利用しないように、サーバーや認証機関で一元管理されています。

このUUIDは、サーバーがない一元管理することができない分散処理系で、個々の機器が勝手に生成しても、それらが重複しないように工夫されてた識別子です。Mac OS X であれば、ターミナルでコマンド uuidgen を実行すれば、UUIDを生成できます。

独自の Bluetooth low energy 機器の開発は、まず機器の振る舞いをカスタム・プロファイルとして定義して、次に、そのプロファイルに必要なサービスとキャラクタリスに生成したUUIDを割り当てて、設計していきます。カスタム・プロファイルの機器に対応するスマートフォンのアプリケーションは、そのカスタム・プロファイルの定義とサービスとキャラクタリスのUUIDの情報があれば、設計できます。

また Blutooth SIG のメンバーになることで、Bluetoothにプロファイルを提案して採択してもらうことができます。

1社で製品とその対応アプリケーションを提供するだけであれば、カスタム・プロファイルでよいのです。ですが、例えば心拍計のような一般的な機器でこのようなやり方をすると、同じ目的の機器に対して、会社ごと異なる無数のカスタム・プロファイルが出てきてしまいます。

業界に関わる会社群が、標準化したプロファイルを Bluetooth SIG に提案して採択してもらい、同じ振る舞いを1つのプロファイルに統合することが、機器市場をつくり上げるうえでも必要になります。

2015年1月には、次の15のプロファイルが採択されています。Bluetooth low energy が登場する以前から無線化が進んでいた、フィットネスや自転車などの分野で使われる機器のプロファイルが、特に早くから採択されてきています。

[Profiles | Bluetooth Development Portal](http://developer.bluetooth.org/gatt/profiles/Pages/ProfilesHome.aspx)

- アラート通知 (Alert Notification)
- 血圧計 (Blood Pressure)
- 自転車のパワーメータ (Cycling Power)
- 自転車の速度とペダル回転数 (Cycling Speed and Cadence)
- デバイスの発見 (Find Me)
- 血糖値 (Glucose)
- 体温計 (Health Thermometer)
- 心拍 (Heart Rate)
- 入力装置 (HID OVER GATT)
- 位置と経路誘導 (Location and Navigation)
- 電話の警告(Phone Alert Status)
- 近接 (Proximity)
- ランナーの速度とペース (Running Speed and Cadence)
- スキャナの通信パラメータ設定 (Scan Parameters)
- 時刻 (Time)

<!-- レイヤをまたいだ、セキュリティとプライバシーの話をまとめる -->

=== 無線通信と通信規格

通信とは、一方向もしくは双方向に情報を伝えることです。通信には、必ず送り手と受け手がいます。送り手と受け手とが事前に知っている通信のための規則が通信規格です。規格には、情報を物理的にどのように表現するか、またその信号をやりとりするタイミングや情報の意味などが含まれます。

通信は必ず相手があり、単1のハードウェアで完結しないため、通信システムが一般で使われるには、製品間での相互接続が重要です。そのために、通信規格および規格認定機関などの運用が不可欠なのです。

==== プロプライエタリな通信規格とスマートフォン

通信規格は、複数の企業が規格を監督する非営利団体を作るなどして、一般に開かれたものとする規格と、1社もしくは複数の会社が仕様を決めて、それらの会社群の製品群間で利用するプロプライエタリ(Proprietary)な規格があります。

電波を送信する側と受信する側が決まっているような利用場面では、プロプライエタリな規格が有利になります。例えば、パソコンに使われるワイヤレス・マウスは、USBに挿した専用レシーバとマウスの間で無線通信をしますが、それにはプロプライエタリな通信規格がよく使われています。

プロプライエタリな規格は、自社だけですべてを決定できるので、短期間で規格をまとめあげられます。そして、用途が絞り込めるので、用途に特化したり簡素化した無駄がなく利用場面にあわせた規格が作れます。

例えばマウスであれば、電池消費量が小さい無線通信にすることで、電池交換の手間が少なくできます。通信再開がすばやくできる仕組みがあれば、マウスを動かせばすぐに画面のマウスカーソルが動く違和感のない操作ができます。そのような作りこみが、製品の高い競争力になります。

ですが、スマートフォンには、プロプライエタリな通信規格が採用できません。スマートフォンは、パソコンのようにUSBでハードウェアを拡張して使用することは、まずありません。ですから、プロプライエタリな通信規格を採用した周辺デバイスをスマートフォンで使おうとすれば、スマートフォンが初めからその規格に対応していなければなりません。

もしもスマートフォンを、製造原価を押し上げてでもプロプライエタリな通信規格に対応させるとするならば、それがスマートフォンのユーザにとって魅力的でなければなりません。ですが、プロプライエタリな通信規格に対応した周辺デバイスは、特定の会社群が販売する製品に限定されますから、それほど多種多様とえるほどはありません。多くのユーザが使う汎用的なものでなければ、わざわざそのためのハードウェアを搭載することはありません。

==== 無線通信規格の役割

無線通信規格には:

- 0/1のデジタル信号を電波で送受信する技術
- 接続先の検索と選択の技術
- 正規の接続先や利用者だと認証する技術
- 認証していない何者かが電波から情報を読み取れないセキュリティ技術
- 他の無線通信や電波使用機器との共存性
- データ形式や機器の振る舞い

が求められます。

まず、通信規格には必ず変調方式があります。ここでの無線通信は、電波で0/1のデジタルな情報をやりとりするものとします。アナログ信号である電波で、0と1のデジタル信号を表現するために、電波の振幅や周波数を時間変化(変調といいます)させます。

次に、通信規格には必ず接続先の検索と選択方法が規定されています。ユーザには接続したいデバイスと接続先のデバイスが目に見えていていて、無線で接続するものだと予想しているので、無線通信で2つのデバイスがつながるのは当たり前だと考えます。ですが、デバイスにとっては、お互いの存在すら電波をやりとりしなければわかりません。

そして、通信規格には必ず正規の接続先や利用者だと確認する認証と、知られてはいけない情報を知られないようにするセキュリティの確保、また他人に知られたくない個人のプライバシーを保護する仕組みがあります。

人間には電波を見たり聞いたりできる知覚能力はないので忘れがちですが、送信した電波は四方八方に広がっていきます。

無線で接続した周辺デバイスが送信する電波は、その周囲にいるだれでもが受信できます。また、周囲にいる誰かが、周辺デバイスと偽った電波信号をスマートフォンに送信してくることすら想定されます。

さらに、通信規格には他の通信規格と共存できる技術が必要になることがあります。電波は周囲に勝手に広がるものなので、各自が好き勝手に電波を使用すると混信してしまします。ですから、電波は公共の資源として周波数区分による割り当てと、送信電力や電波の品質が規定されて管理されます。

周波数の割り当ては、用途を決めて割り当てられるライセンスド・バンドと、専用の割り当てを受けなくても利用できるアンライセンスド・バンドがあります。Bluetooth low energy は 2.4 GHz帯のアンライセンスド・バンドを利用しています。この周波数帯は、 無線LAN や Zigbee などの無線通信、電子レンジ などの高周波加熱などの用途で、様々な機器が混在して使っています。

多種多様な機器が混在する周波数帯を利用するため、他の無線通信機器の通信に影響を与えたり、逆に影響を受けて通信ができなくならない技術が必要になります。また、電子レンジのような通信以外に電波を利用する機器が周囲にあっても、デバイスの利用が邪魔されない工夫も必要です。

そして、通信規格がデータ形式やデバイスの振る舞いまで仕様を決めることが必要になることもあります。無線通信は2つのデバイスが相互接続するための技術です。用途が決まっている周辺デバイスは、機能や振る舞いを設計してハードウェアとして作っていきます。ですから、出荷後に周辺デバイスの機能を変更することは、まずできません。ですから、やりとりするデータがどのような形式でどのような意味をもつのか、また周辺デバイスがどのように動作するのかまでが、通信規格の一部として提供されていなければ、設計ができません。

==== 無線LANとクラシックBluetooth

身の回りには、すでに 無線LAN や Bluetooth などの無線通信技術を採用した製品がたくさんあります。スマートフォンは必ず無線LANとBluetoothを搭載していて、インターネット回線として、あるいはヘッドセットとの接続にと、様々な使い方をしています。

無線LANとクラシックBluetoothがどのような技術なのかを簡単に見てみます。ここではBluetooth low energy と区別するために、Bluetooth3 までの従来からあった Bluetooth を クラシックBluetooth と呼びます。

無線LAN はビット・データを、より高速にまた省電力で通信するかに注力した技術です。自宅であれば、インターネットに接続できるWi-Fiアクセスポイントを設置しているでしょう。手元の端末 から 無線LAN を通じて、インターネット標準のプロトコル群 TCP/IP (Transmission Control Protocol/Internet Protocol) で、世界中のサーバと通信できます。

無線LAN に接続してブラウザにどこかのホームページを表示するまでの手順を見てみます。まず無線LANアダプタの電源をオンにして、周囲にあるアクセスポイントを検索します。アクセスポイントに接続を試みると、勝手に他人に使われないように、パスワードの入力を求められます。ユーザがこれらの設定手順を間違いなく実行して、接続できます。

このように無線LANを使うには、接続先の検索と選択、正規の利用者だと確認するセキュリティがあります。

ですが、インターネットを通じて世界中のサーバと通信できるだけでは、意味はありません。動画を見たりファイル交換などアプリケーションが利用できて初めて、意味があります。

例えば、YouTubeで動画を見ているとします。このとき、YouTubeのサーバから動画像のデータが逐次送られてきます。そのデータを、ブラウザのプロセス内の動画像データのデコーダが処理して、画面に動画を表示します。パソコンは、様々なアプリケーションをインストールして実行できるので、ウェブブラウザやファイル・ダウンロードなど、様々な通信の利用場面に使えます。

無線LAN で通信を様々な用途で利用できるのは、任意のアプリケーションをインストールして実行できるパソコンで利用するからなのです。

いっぽう、クラシックBluetoothは、数メートルから数十メートル程度までの距離の隣接するデバイス間で、高速通信を省電力で提供する技術です。ハンズフリー通話に使うヘッドセットなど周辺機器との無線通信によく使われています。

クラシックBluetooth でヘッドセットをiOSデバイスに接続して通話するまでの手順を見てみます。まず双方の Bluetooth をオンにします。ヘッドセットをペアリング・モードにすると、ヘッドセットが周囲に自機の情報を送信しつづけるので、iOSデバイスでヘッドセットが発見できます。iOSデバイスからヘッドセットに接続を試みると、PINコードの入力を求められ、接続します。一旦ペアリングをしておけば、無線接続が切断しても、再度接続可能な状態になると自動で再接続できます。

クラシックBluetoothを使う場合でも、無線LANと同じように、接続先の検索と選択、正規の利用者だと認識するためのセキュリティの仕組みが入っています。

クラシックBluetoothは周辺デバイスとの接続に使われる技術です。周辺機器は特定用途に特化したハードウェアですから、その機器の機能や振る舞いは設計段階で作りこまれます。無線LAN でのように、あとからアプリケーションをインストールして任意のアプリケーションを実行することはありません。

ですから、周辺デバイスを設計するためには、データ形式や機器の振る舞いまでが規格になっていなければなりません。アプリケーションまで包括した仕様が規格化されてはじめて、ヘッドセットやiOSデバイスなど様々な会社が設計製造したデバイス間での相互接続が保証できます。

例えば、ヘッドセットは電話の着信や発信の操作、そして通話音声の双方向のやりとりをするハードウェアです。その機能や振る舞い、そしてデータ形式は [ハンズフリー・プロファイル (Hands-Free Profile)](https://developer.bluetooth.org/TechnologyOverview/Pages/HFP.aspx) [^2030] で決められています。

[^2030]: [Hands-Free Profile, https://developer.bluetooth.org/TechnologyOverview/Pages/HFP.aspx](https://developer.bluetooth.org/TechnologyOverview/Pages/HFP.aspx)

ヘッドセットに音楽を聞く機能も入れたければ、ハンズフリー・プロファイルに加えて高音質の音楽データを送る
[Advanced Audio Distribution Profile (A2DP)](https://developer.bluetooth.org/TechnologyOverview/Pages/A2DP.aspx) [^2040] も実装します。

[^2040]: [Advanced Audio Distribution Profile (A2DP), https://developer.bluetooth.org/TechnologyOverview/Pages/A2DP.aspx](https://developer.bluetooth.org/TechnologyOverview/Pages/A2DP.aspx)

クラシックBluetoothは、用途ごとに様々なプロファイルが規格として決められており、通信の双方が同じプロファイルを実装することで相互接続が確保されます。プロファイルが定義されていない場面には、仮想シリアル通信のプロファイル [Serial Port Profile (SPP)](https://developer.bluetooth.org/TechnologyOverview/Pages/SPP.aspx) [^2050] を使います。

[^2050]: [Serial Port Profile (SPP), https://developer.bluetooth.org/TechnologyOverview/Pages/SPP.aspx](https://developer.bluetooth.org/TechnologyOverview/Pages/SPP.aspx)

===  Bluetooth low energy のアーキテクチャ

Bluetooth low energy のアーキテクチャを階層表示したのが [#fig_ble_protocol_stack] です。通信技術は異なる機種間でデータをやりとりする技術です。0/1のビット・データのやりとりにはじまり、接続管理やビット・データのかたまりの意味づけなど、いくつもの役割が組みあわさって、はじめて通信ができます。Bluetoothは、通信の手順やデータ構造をプロトコル、機器の振る舞いをプロファイル、と呼びます。

![ #fig_ble_protocol_stack Bluetooth low energyのプロトコル・スタック](fig/ch02_ble_protocol_stack.png)

物理層からGATTまでの階層は、それぞれ下層の機能を使って、相手の同じ階層のプロトコルと通信します。ジェネリック・アクセス・プロファイルは、機器の振る舞いを定義します。機器の振る舞いは、物理層からGATTまでのレイヤそれぞれの役割を通じて実現されるので、ジェネリック・アクセス・プロファイルは、特定のレイヤのものではなく、物理層からGATTまでの全てのレイヤに影響を与えます。物理層からGATTまでの階層は、相手の同じ階層のプロトコルと通信します。レイヤの役割は以下のとおりです:

- Generic attribute profile (GATT, ジェネリック・アトリビュート・プロファイル)
	- サービス/キャラクタリスティクスを提供。
-Attribute protocol(ATT, アトリビュート・プロトコル)
	- アトリビュートという値をやりとりする
- Logical Link Control and Adaptation Protocol(L2CAP, ロジック・リンク・コントロール・アンド・アダプティブ・プロトコル)
	- 論理チャンネルの提供
- Logic link(ロジックリンク)
	- 近接デバイスの発見と接続、通信
- Physical layer(物理層、フィジカル・レイヤ)
	- 無線通信

==== コントローラとホスト

Blueoothのアーキテクチャは、コントローラ、ホストそしてアプリケーションの3つに分けられます。コントローラは、電波の送受信、パケット通信、接続管理をおこないます。高周波回路とその制御回路、専用回路またマイクロコントローラで実行されるソフトウェア、で実装されます。ホストは、Bluetoothのプロトコルやプロファイルごとの通信の多重化など、Bluetoothの複雑な通信機能を提供します。アプリケーションは、ユーザが作るアプリケーションです。この2つはソフトウェアです。

==== ホスト・コントロール・インタフェース

コントローラとホストの間に、Host Control Interface (HCI)という、コマンドとデータの通信仕様があります。HCIはコントローラとホストを、論理的に、また物理的に分離します。ホストとコントローラを1つの半導体に実装する1チップ構成と、別々の半導体で実装する2チップ構成のいずれかがとれます。

1チップ構成は、半導体チップの中にあるマイクロコントローラで実行されるソフトウェアで、コントローラの制御部分とホストが実装されます。このときHCIは、2つのソフトウェアを接続する(ライブラリ呼び出しなどの)、論理的な接続仕様として使われます。1チップ構成では、チップ内部のマイクロコントローラはユーザのアプリケーションも実行します。

コントローラをモジュール化すると、2チップ構成になります。モジュールとは、半導体や高周波回路の素子などを小さな基板に実装して部品化したものです。電波を出力する機器は各国の電波法の承認を取得しなければなりません。この電波を出力するモジュールが承認を取得していれば、機器本体で承認を取る必要がなくなる、メリットがあります。ホストは別のプロセッサで実装されます。ホストはモジュールのコントローラと、シリアル端子やSPI、USBなどの物理インタフェースを通じて、HCIで通信します。

規格にHCIがあるので、2チップ構成でも、どのメーカのコントローラでも共通に使えるようになります。例えば、パソコンでは、ホストはBluetoothスタックと呼ばれるソフトウェアで提供されます。どのメーカのBluetooth USBドングルでも、USBを通してHCIで通信することで、同じように使えます。

どのようなチップ構成でも、ユーザのアプリケーションは、ホストと同じプロセッサで実行されます。ですから、HCIの場合と違い、ホストとユーザアプリケーションの間のインタフェースは、規格に定義がありません。メーカーやOSなどの提供側が決めるもので、開発環境に依存します。

どちらの構成をとるかは、状況によります。機能が単純な周辺機器ならば、製造コストを最小にするため1チップ構成をとるでしょう。機能が複雑だったり、既存設計に Bluetooth low energy の通信機能を追加するなどで、1チップ構成ではユーザアプリケーションを処理できないならば、2チップ構成を選びます。モバイル機器やパソコンなど、モジュールを採用すれば、おのずと2チップ構成になります。

==== Logic Link Control and Adaptation Protocol

ホストのLogical Link Control and Adaptation Protocol(L2CAP)は、通信の多重化を行うレイヤです。2つのデバイス間のデータ通信を提供するコントローラを通じて、プロトコルごとに、指定したチャネルごとの独立した通信を提供します。頭文字で略すとLLCAPですが、Lが2つ並ぶのを数字で表して、L2CAP、と表記します。

iOSデバイスのBLEアクセサリの設計指針は、 スレーブからマスターへの通信パラメータの伝送は、L2CAPの接続パラメータアップデートで伝えるべきとしています。この設定を要求するのは周辺機器のみです。 設定できるパラメータは、通信を行う周期を与えるコネクション・インターバル、接続が失われたと判定するスーパービジョン・タイムアウトなどです。

周辺機器は、通信頻度や電池消費量のバランスがとれるように、適切な場面で適切なパラメータを設定します。例えば、周辺機器がiPhoneに初めて接続したときに、まとまった量のデータを一気に送信したいならば、インターバルを短くして実効通信速度をあげて、短い時間でデータを送ります。接続したあと、電池消費量をおさえたいならば、インターバルを長くします。

==== Attribute Protocol(ATT)とGeneric Attribute Profile(GATT)

iOSアプリケーション開発者が実装で直接触れるのは、ホストの上位層にある、Attribute Protocol(ATT)とGeneric Attribute Profile(GATT)です。このレイヤは、 Bluetooth low energy のサービスおよびキャラクタリスティクスを定義しています。

 Bluetooth low energy の周辺機器は、サーバとして、センサの値、動作設定値、内部状態などを公開しています。 Bluetooth low energy は、ある機能をサービスという単位にまとめます。1つのサービスは複数のキャラクタリスティクスを持ちます。例えばエアコンであれば、室内温度というサービスを作り、そのなかに気温センサの値というキャラクタリスティクスをもたせる設計をしたりします。

==== ジェネリック・アクセス・プロファイル

ジェネリック・アクセス・プロファイル(Generic Access Profile, GAP)は、すべてのBluetoothデバイスが実装すべき、ベースプロファイルの実装です。GAPは、物理層からGATまでのレイヤをまたいだ、デバイスの振る舞いを提供します。

GAPは4つのデバイスの役割を定義します:

- ブロードキャスター
- オブザーバ
- ペリフェラル
- セントラル

Bluetoothデバイスは、コントローラが対応していれば、この4つのどの役割になれます。しかし、同時に2つ以上の役割になることはできません。

ブロードキャスターは、送信するだけのアプリケーションです。 Bluetooth low energy のアドバタイジングで、データをブロードキャストします。ブロードキャスターは送信機能のみが必要で、受信機能は必要ありません。またコネクションをサポートしません。オブザーバは、受信するだけのアプリケーションです。オブザーバには受信機能のみが必要で、送信機能とコネクションは不要です。

ペリフェラルは、単1の接続をサポートします。コントローラのスレーブのみをサポートします。セントラルは、すべてのペリフェラルとの接続を開始して、複数の接続を管理するものです。

役割により必要な機能が異なるので、必要な機能だけを実装することで、製造コストの削減などができます。例えばブロードキャスターであれば受信回路やその制御機能をすべて削除することもできます。しかし実施には、設計開発から販売管理までを含めたコストから、セントラルに対応したデバイスのみが販売されています。

=== セキュリティとプライバシー

通信技術には、想定される人間の悪意や犯罪行為に対抗できる、強固なセキュリティの確保とプライバシー保護の技術が必要です。

機器を電線で接続しなくても利用できたり、あるいは近づけるだけで通信ができる無線通信は、無線LANや電車の自動改札などで日常的に利用しています。通信では、クレジットカード情報のような課金などの重要な情報もやりとりされているので、不正な利益を得ようとする人も出てくるかもしれません。

無線通信は電波で通信しますが、電波は四方八方に広がっていきます。ですから、誰かがこっそり通信を傍受して、自分しか知らないはずの情報をこっそり盗みだすかもしれません。あるいは、外部から電波を送って機器を不正に操作したりするかもしれません。

==== 無線通信の利用場面と暗号化技術

通信のセキュリティ技術に、認証 (Authentication)と 認可 (Authorization)という2つの単語があります。認証は、通信相手が正しい相手であることを確認する方法のことを言います。認可とは、認証により確認されたものに対してアクセス権限の制御を行い、相手に固有のサービスを提供することを言います。

認証や認可の仕組みは、通信する機器同士がお互いに知っていなければならないものですから、通信規格が提供しなければなりません。しかし、認証や認可をどう使うかは、利用場面にあわせて設計するものです。

例えば、スポーツジムにあるトレーニング装置からスマートフォンに心拍データを取得する一時的な利用であれば、すぐに使えることが便利ですから、だれでも利用できるように設計します。その場合は認証の仕組みを使うことはないでしょう。ですが、個人が所有する心拍センサーであれば、他人が勝手に接続してデータを読み取られるのは嫌なことですから、認証の仕組みを必ず入れるでしょう。

無線通信は、人間であれば目を閉じて声だけで周囲と会話するようなものです。人間であれば声色で相手が誰かを判定できますが、電波には人間の声色のような機器に固有の情報はありません。無線通信の認証と認可は、暗号化技術で実現されています。

==== 無線通信への攻撃方法

Bluetooth無線技術は、次の悪用や攻撃方法を想定しています [^1310]。

- 受動的な盗聴 (passive eavesdropping)
- トラッキング (tracking)
- 中間者攻撃   (man-in-the-middle attack, MITM)

[^1310]: [​Security, Bluetooth Smart (Low Energy), https://developer.bluetooth.org/TechnologyOverview/Pages/LE-Security.aspx](https://developer.bluetooth.org/TechnologyOverview/Pages/LE-Security.aspx)

電波は周囲に広がるうえに、Bluetooth無線技術は規格化された技術なので、電波を受信して通信内容を解析することはとても容易にできます。

まず、受動的な盗聴は、受信するだけの盗聴です。Bluetooth Smart機器の通信は最大でも50メートル程度ですが、指向性の高いアンテナと感度の良い受信装置を使えば、その通信距離よりもはるかに遠距離から盗聴することもできます。受動的な盗聴に気づくことは困難です。

受動的な盗聴で、トラッキングができます。Bluetooth無線技術は利用者が常に身につけたり持ち歩く機器に使われます。機器がやりとりするパケットには、返信するときに必ず必要になる発信元の識別情報が入っています。その識別情報をたどっていくと、ユーザがどこにいたかというプライバシー情報が収集できるかもしれません。

また、能動的に電波を送信することもあります。Bluetooth Smart機器が通信しているタイミングに合わせて、正当なパケットを打ち消すほど強力な電波を送信して、パケットのやりとりの間に割り込み、不正に情報を引き出したり機器を操作するかもしれません。

このような高度な技術を使わなくても、攻撃できる場合もあるでしょう。ユーザが近づいただけで反応するBluetooth Smart機器であれば、受信した電波を再送信する中継装置のようなものを使えば、暗号化に関係なく機器を遠方から反応させられるでしょう。これはユーザが近づいただけで機器が反応するという設計がもたらす脆弱性で、無線規格では対応ができないものです。

==== ペアリングとボンディング

Bluetooth low energyは、AES(Advanced Encryption Standard)というアメリカ国立標準技術研究所が公開している共通鍵暗号化方式を使います。AESの鍵長は128ビット、192ビット、そして256ビットの3つが選べますが、Bluetooth low energyは128ビットの鍵長を使います。

共有鍵暗号化方式とは、同じ鍵で暗号化と復号化とができる暗号化方式です。暗号化に使う鍵それ自体を通信相手に渡して共有するために、共有鍵暗号化方式と呼ばれます。

Bluetooth low energyは、2つの機器間でこの鍵を交換する手順をペアリング、交換した鍵を保存して再接続してもセキュアな接続が続けられるようにすることをボンディングと呼びます。

通常はペアリングをするならばボンディングもするように設計しますが、ペアリングはするがボンディングはしない設計も可能です。例えば、スポーツジムにある共有機器で、使用中はセキュアな接続をさせたいが同じ機器を継続して利用することはないならば、ペアリングはするがボンディングはしない設計が使いやすいでしょう。

スマートフォンとBluetooth Smart機器とをペアリングするときに、PINコードと呼ぶ6桁の数値を入力することがあります。このPINコードは、鍵を交換する通信を暗号化するテンポラリ鍵に使われます。Bluetooth Smart機器は、ペアリングでPINコードを入力させないようにも設計できます。このときはPINコードは0であると扱われます。

6桁のPINコードは、強固なセキュリティとはいえません。もしも鍵を交換する通信が受動的に盗聴をされていると、そのデータにPINコード0から999,999までを総当りで解析するだけで、鍵そのものを取り出せます。6桁の数字を2進数で表現すると20ビットです。鍵長が20ビットの暗号化通信の解析には、1分もかからないでしょう。

Bluetooth low energyは128ビットの鍵長を使いますが、この鍵長であれば総当りでは解析に何千億年もの時間がかかり、解読すること自体が現実的ではなくなります。もしもPINコードを128ビット長にしようとすると、ランダムな英数小文字を24文字入力しなくてはなりません。これほどの文字数ではタイプミスばかりして、不便でしかありません。

そこでBluetooth low energyは、人間によるPINコード入力以外に、NFC (Near Field Communication)やQRコードなどの、無線通信以外の方法で128ビット長のテンポラリ鍵を交換する方法も提供しています。セキュリティを求めるならば、これらも検討します。

共有鍵暗号化方式では、どうしても鍵それ自体を相手に渡さねばなりません。そこでBluetoothコア仕様4.2では、Bluetooth low energyにも公開鍵暗号化方式がとりいれられました。公開鍵暗号化方式は、暗号化に使う公開鍵と復号化に使う復号鍵が別々の鍵になる方式で、通信相手には公開鍵だけを渡します。秘密鍵は通信でやりとりされないので、もしもペアリングを受動的に盗聴されていても、秘密鍵は盗み出せません。

Bluetooth low energyの認証および認可は、1つ1つのパケットの単位でおこなわれます。AESは、128ビットのデータを1ブロックとしてブロック単位で暗号化する方式です。ですから、ブロックの値が同じであれば、暗号化された値も同じになります。Bluetooth low energyは、パケットが同じデータを運んでいても、暗号化データは全く違う値になるように、また同じ暗号化データが現れることがないように、ブロックに通信開始ごとにランダムに割り当てる値とパケットごとに割り当てるシーケンス値も混ぜ込みます。

受動的な盗聴への対策として、パケットの暗号化、またGATTでキャラクタリスティクスの暗号化ができます。通信全体を暗号化すると暗号化処理の重さや消費電力の増加が問題となる場合や、特定のキャラクタリスティクスだけを保護したいならば、GATTのキャラクタリスティクス単位でそのデータを暗号化する手段がよいでしょう。

トラッキングへの対策として、パケットのやりとりのために必ずパケットに入る発信元アドレス値を、ランダム値に変更することができます。ペアリングをした機器は、認証した機器かどうかを、ランダム値から鍵を使い判定できます。受動的な盗聴をして発信元アドレス値を集めても、鍵を持たないならば機器とアドレス値の対応づけができないので、トラッキングへの対抗になります。

受動的な盗聴と能動的なパケットの差し込みを行う中間者攻撃への対策は、通信の暗号化以外にも、GATTのキャラクタリスティクスごとの認可でも対策できます。例えば、キャラクタリスティクスに認可があるものだけが書き込みが可能という属性をつけておけば、鍵を使い生成する正しい署名データがあるものだけが、書き込みできます。

