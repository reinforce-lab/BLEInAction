うれしい、たのしい、びーえるいー
	はじめに

	第1章

		あなたとBluetooth Low Energy
			Bluetooth Low Energy
				機械と機械の無線の会話。対応ハードウェア。アプリケーション。閉じたローカル。
				機械の間の通信規格。外国語を覚える。通訳、旅行で自分で、文書を読む。書く。仕事。
			やりたいことは何か
				自分/他人
					A. 自分で作り、自分で使う
					B. 自分で作り、他人が使う
					C. 他人が作り、自分が使う
					D. 他人が作り、他人が使う
					Cは消費者。A,Bかと思うけど、実はBだけじゃなくてDは事業者。その理解も必要。
			どのような関わり方をするのか
					自分で作り自分で使う。仕組みを理解して使う。不具合。ループ。1つ。
					他人が使う。製造者責任、サービスとして、作りこみ。後から来る費用と手間。サービス
					どのくらいの数量? 数個、数百個、数万個、数百万個。
					時間の話。すぐ使う、流通して長く経過してからたどり着く。
					それが本業、それともおまけ? プラットホームの話。
			具体的な行動
					ホビー:作る、動かす。
						1対1
					事業:自分のサービス。
						フロー:ハードウェアの設計、ファームウェア、アプリ、(クラウド)サーバー
						雇用する、外部に製造、設計、調査など、委託する。
						課金方法。ハード売上、月額課金。使えなくする。利用情報がわかる、繋がる。
					立ち上げ:開発フローから事業として安定するまでの時間。
			知りたいこと、知るべきこと
				ハードウェア(金物):無線や規格の認証。コストなど最適化。
				ファームウェア:体験のハード側。
				ソフトウェア:アプリケーション、体験。
				事業の立ち上げ:量産、品質管理、流通と販売、サポート。ディレクター、プロデューサー。
				プラットホームへの統合:戦略。MESH技術、独自プラットホーム。ファーム更新。
				深さ:とりあえず動けばOK。何万台も作って動くように。(多様な環境、時間軸、電池が腐る)

	 Bluetooth無線技術とBluetooth Low Energy
	 	  無線通信規格の役割
				通信には必ず通信相手が必要。通信相手とは同じ通信の知識を共有していなければならない。
	 	　歴史と発展
				無線通信技術。
				情報通信社会、通信をベースにした社会。
				パソコンの裏側、無線通信、コスト。モバイル化。必然としてコネクタはNG。拡大できない。
		 いくつもある無線通信技術との比較
		 		周波数帯、方式、費用(製造とランニング)、設定、初期化。破棄までの流れ。
		 超低消費無線通信技術の統合
		 		無線通信から異なる。秘訣は、短時間のオンだけで完了する通信。イベントを伝える通信。
				ハードウェアの抽象化、ATT/GATT。
		 Bluetooth Low Energyのエコシステム
		 		iPhone4Sから始まった。プラットホームとしての展開。
		 		アプリケーションへの開放。ハードウェアは自動的に。BTが4になると半ば強制で。
				他のOSは。Android、Windows、Linuxの対応。ドライバ、アプリケーションからの利用。
		 アプセサリの登場
		 		アプリケーション、サービスと統合されるハードウェア。
				フィットネス、Keyfob、近接検出、自動ログイン、WiFi設定、ANCS通知。メガネ的なもの。

		技術とその活用
			活用例
				既存分野での発展的利用、教育、プラットホーム的なものとして。
			発想方法
				プロトタイピング、作らない方法。
			開発フロー
				外に出すのか、自分たちで作るのか。手短な何か。
			チームの作り方
				雇うのか、組むのか。

		まとめ
			無線通信技術は、この100年間で社会を大きく変化させてきた技術です。
			Bluetooth Low Energyは、スマートホンを土台にしたエコシステムで、急速に普及しました。
			多種多様なものに使うための、超低消費電力とデータ表現能力、セキュリティがあります。
			アプセサリ、という言葉が生まれるように、目に見えない関わり方の活用があります。
			独自のハードウェアではなく、プラットホーム利用ができます。
　


作ってみよう
	自分で作って使う
		BLEを活用する必要最小の知識
		発想を機能と流れに分けてみる
		作る環境はどれを選ぶか
		どこから始めるか、困った時は
	チームでプロトタイピング
		プロトタイピングの段階とその担当	(ブレスト、実験、試作の繰り返し、製品化)
		アイディアを手段に落とし込む 		(物理センサと、設置場所での測定対象、そして体験)
		トラブルとその事前回避		(開発チームの距離、プロトと量産設計の違い)
	開発例
		micro:bitとmakecodeを使う
		スポーツ用品をBLE化してみる
		通知デバイスやビーコンを作る
	まとめ
		- ハードウェア、ファームウェア、アプリケーションの3つが必要です。
		- 個人開発で全てを詳細学習は、量が大きすぎます。サンプルがある既存の何かからスタートしましょう。
		- 同じハードウェアでも、サービス次第で、まるで異なるものとなります。目的となるサービスの手段として適切なのか、あるいは適切にできるのかの確認が、試作です。
		- 予期せぬ事態は、いつも起こります。そのようなトラブルは、早く見つけて、早く相談して、小さく解消することが重要です。組織をまたぐと、それはできなくなります。

BLE技術
	BTの歴史
		無線通信規格の役割とその運用
		技術の登場とその展開
		技術のバージョンとロゴの変遷
		他方式との比較	(WiFi, LoRaWAN, LTE)
		エコシステムとその普及
	通信のレイヤの構成と役割
		レイヤ構成(物理、リンク、ATT/GATT、セキュリティ)
		レイヤを垂直につらぬく仕様、GAP
		物理ビットレートと実効ビットレート
		セキュリティとは
	物理層
		電波で信号をやりとりする。物理的な信号の強さと、シャノンの定理。
		変調方式、そして周波数と適応ホッピング。チャンネル。
		パケットのフォーマット
		仕様拡張: 拡張されたパケットフォーマット
		仕様拡張: 高速化と長距離通信。2Mbps、コーデッドPHY
	アドバタイジング
		存在を知らせるブロードキャスト
		スキャンとレスポンス
		アドバタイジングの拡張
	リンク層
		接続と切断
		L2CAPの役割。
		チャネルと役割。GATT、SMP、L2CAP Connection Oriented Channel。
	ATT/GATT
		ATTとGATTの関係
		ATTの構成
		プロファイルとサービスそしてキャラクタリスティクス
		サービスの問い合わせと取得
		ノーティフィケーションとインディケーションの違い
		暗号化と署名
	代表的なサービス
		サービスチェンジ
		デバイスインフォメーション
		時間
	L2CAP Connection oriented channel
	セキュリティ
		BLEでのセキュリティの実装	(ハードウェアによるもの、規格で保証、拡張可能)
		ペアリングとボンディング
		暗号化方式と追加された暗号化方式
		鍵の交換
		暗号化そして署名への利用
	群としての通信に向けて
		BLE mesh
		BLE IPv6(6LowPAN, MQTT, RESTful?)
	まとめ
		- BLEの仕組みは、発見、接続、通信、切断の流れで、とてもシンプルな設計。
		- データが流れ続ける用途ではなく、とても小さな情報量を、たまにやりとりする場面に適した、削ぎ落とした技術仕様である。
		- 規格は拡張されている。高速化、長距離化、インターネット技術の利用に向けたパケット長を伸ばす。
		- 通話などを想定して、ストリーミングの適用で、channelなど、技術が拡張されている。これはヘッダ削減による効率化にはなる。プロファイル定義がないので、活用例はない。

iOSのアプリケーション開発
	iOSのプラットホーム利用
		周辺機器とその利用(開発することがまずないだろう)
		GamePad,キーボード,MIDI,ANCS
		HomeKit,iBeaconロケーション
		CoreBluetoothフレームワークの役割
		デバイスの能力と制約(iOS, Watch OS, TVの能力)
	CoreBluetoothフレームワークとその構造
		バックグラウンドとフォアグラウンドの振る舞い	(消費電力のイメージ)
		デバイスの発見、接続、通信、切断
		デーモンとプロセス間通信
		セントラルとペリフェラル
		サービスとキャラクタリスティクス
	シンプルなセントラルを作る
		機能確認と機種の判定
		プライバシー設定とユーザ許可ダイアログ
		スキャンと発見
		デバイスの識別と接続の復元
		サービスとキャラクタリスティクスの検索と取得
		キャラクタリスティクスの読み書き
	シンプルなペリフェラルを作る
		機能確認と機種判定
		サービスとキャラクタリスティクスの構築
		セキュリティオプションの設定
		アドバタイジングと接続受け付け
	さらに作り込む
		ペアリングとボンディング
		連続した書き込みとそのバッファ
		サービスチェンジ
		L2CAP connection oriented channel
	開発の豆知識
		よくあるハマるところ	(キャッシュの不一致、サービスが見つからない、ボンディングのし忘れ、再現してフローにする?)
		コネクションインターバルとその変更
		汎用のBLEアプリの利用
		プロビジョニングを使ったロギング
		物理的なスニフィング			(アドバタイジングのチャネルの限定?)
		デバイスインフォメーション・サービスの活用
		ちょっと便利なSwiftのextension
	まとめ
		- セントラルとペリフェラル、フォアグラウンドとバックグラウンドに対応している。
		- 省電力のためのガイドラインがある。適切なスキャン時間程度だけど。
		- 常に相手デバイスとセットになった開発になるため、ステップバイステップと、雑談ができる開発体制が役立つ。
		- 通信は相手が必要。スマートホンのプラットホームの上に成り立つ。

ペリフェラルの開発
	目的に適した実装提案
		用途と仕様			(縦軸にハードウェア、横軸にソフトウェア。電池交換の有無、設置方法、運用方法、廃棄方法。ハード側からの提案になるもの。)
		試作なのか製造なのか
		開発分担の組み方と流れ	(SDKはどこが作る、ハードODMだと、あとで改良時に金額と時間。資源を持つことは、お金がかかるが、自由度と何より本音が聞けること。判断するには、情報が必要だから。)
		認証制度			(電波法, Bluetooth, 試作時の注意、設計段階で反映、各国対応、説明書)
	半導体の選択
		目的に合わせた選択		(全体バランス。大きさ、消費電力、目的。モジュール、価格。極端な低消費電力なのか。)
		ワンチップか2チップか	(構成。通信だけ、既存機器+通信、処理+通信、1チップ)
		センサーを選ぶ			(バス、動作電流、スイッチ兼用とかなら特定の機能。IOの数、エキスパンダ。)
		電池の選択と電源回路		(LiPo, NiH, コイン型、USB)
		半導体会社ごとの特色		(TI, Cypress, Nordic, CSR, Dialog。OS、開発環境、ユーザフォーラムの充実度、買収の過程で)
	電気と機構設計
		モジュール実装		(アンテナの設計、制約、性能の検証)
		電気回路設計		(EMC, EMI)
		製造組み立て、認証制度	(製造管理)
	ソフトウェア開発
		開発フロー			(会社の区切りかたで振る舞いが異なること。流れは、ES、本番、端子は、担当は? 節目は)
		ソフトウェア開発環境		(IDE、RTOS、ライブラリ、ユーザフォーラム)
		アプリケーション開発との連携	(仕様書ベース、提供タイミング、トラブル発生時の切り分け方、連絡の取り方)
		ユーザ体験の確認と継続的開発	(販売前、販売後。そしてOTAなど。動くことではなくて、おつきあいの商売だから。)
	まとめ
		- 立場が異なれば、考え方や見え方が異なる。最初から予想できるものは、予想した組み方にする。
		- 外に依頼して何かを作るとなると、ちょっとした実験への負荷が、お互いに大きい。一方は時間、一方はお金。
		- 専門家の選択と素人だから理解できないは違う。無数の可能性から、適切な組み合わせを選ぶのは専門家に任せればいい。その選択内容と理由は、十分に説明を受けて、勉強すればいい。

BLE技術の実際
	ホストとコントローラ
		コントローラとの通信	(USBでのドングルとの通信。ボードでBT5のと、シリアル通信)
		HCIとその内容
	アドバタイジング
		アドバタイジングデータとレスポンスデータの設定
		アドバタイジングの開始と停止
		拡張アドバタイジング
	通信レイヤを実装する
		L2CAP
		ATT
		GATTS
		GATTC
	通信の実際
		コネクションインターバルとその変更
		サービスを実装して読み出されてみる
		ペアリング/ボンディングを実装する
		ANCSにアクセスしてみる
		iPhoneが持つGATTSのキャッシュ、サービスチェンジ。
		実効ビットレートを伸ばしてみる	(コネクションインターバル、パケット拡張、2M PHY, L2CAP Ch.)
		通信距離を伸ばしてみる (CODED PHY)

おわりに
	BLEはとても身近な無線通信技術。
	アプリケーションとハードウェアを組み合わせて開発ができる、
	目視できる範囲での技術として。
	スマホのエコシステムで増幅も可能。
	チームで、事業でとなると、技術の境界と組織の境界と知識の境界とが混じってしまう。その境界を溶かす役割ができれば、この本の目的達成です。
